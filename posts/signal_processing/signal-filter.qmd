---
title: "Basic Signal Filters"
description: |
  High-level functions to design and apply filters in RAVE
date: 2024-09-18
author: 
  - name: Zhengjia Wang
    orcid: 0000-0001-5629-1116
    affiliations: 
      - name: "Dept. of Neurosurgery, University of Pennsylvania"
categories:
  - "Signal Processing"
  - "Interactive Module"
copyright: 
  holder: Zhengjia Wang
  year: 2024
webr:
  packages: ['ravetools']
  repos: 
    - 'https://rave-ieeg.r-universe.dev'
    - 'https://dipterix.r-universe.dev'
    - 'https://repo.r-wasm.org/'
  version: 0.4.2
  channel-type: "service-worker"
  autoload-packages: false
---

![](signal-filter.png){.hidden}

::: {.alert .alert-warning role="alert"}
This post contains interactive components (experimental) that allows you to execute RAVE code from the web browsers. If you would like to try this feature and customize/play with the code, please be patient. It might take a while for the browser to finish setting up (depending on your network speed). Once the script is ready, you will see "WEBR STATUS: ðŸŸ¢ Ready!" in the above banner.
:::

## 1. Preparation

Let's load the package and generate a sample signal. The signal is a mixture of `2Hz`, `10Hz`, `60Hz`, and noise

```{webr-r}
#| editor-max-height: 500
#| editor-quick-suggestions: TRUE
#| autorun: true
library(ravetools)
sample_rate <- 200
t <- seq(0, 10, by = 1 / sample_rate)
noise <- cumsum(rnorm(length(t), sd = 0.4)) / sqrt(seq_len(length(t)))
x <- 0.2 * sin(t * 4 * pi) + 0.02 * sin(t * 20 * pi) +
  0.005 * sin(t * 120 * pi) + noise

# Plot the signal
ravetools::diagnose_channel(
  x,
  srate = sample_rate,
  name = "Sample signal",
  window = 2 * sample_rate,
  noverlap = sample_rate
)
```

## 2. FIR Filter

Construct a `FIR` filter with low pass at `3Hz` and (around) `0.5Hz` transition bandwidth:

```{webr-r}
#| editor-max-height: 500
#| editor-quick-suggestions: TRUE
#| autorun: true
# Low-pass filter
f1 <- design_filter(
  data_size = length(x),
  sample_rate = sample_rate,
  low_pass_freq = 3, low_pass_trans_freq = 0.5
)
f1
```

Apply the filter to the signal `x` using `filtfilt` method:

```{webr-r}
#| editor-max-height: 500
#| editor-quick-suggestions: TRUE
#| autorun: true
y1 <- filtfilt(b = f1$b, a = f1$a, x = x)

# compare the results
plot(t, x, type = 'l', xlab = "Time", ylab = "",
    main = "Mixture of 2, 10, and 60Hz", xlim = c(0,1))
lines(t, y1, col = 'red')
legend(
  "topleft", c("Input", "Low: 3Hz"),
  col = c(par("fg"), "red"), lty = 1
)

# plot welch-periodogram
pwelch(x, fs = sample_rate, window = sample_rate * 2,
    noverlap = sample_rate, plot = 1, ylim = c(-100, 10))
pwelch(y1, fs = sample_rate, window = sample_rate * 2,
    noverlap = sample_rate, plot = 2, col = "red")
```
