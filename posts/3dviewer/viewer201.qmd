---
title: "Customize 3D Viewer Color Palette"
description: |
  Create basic 3D viewer and render with colors
date: 2024-09-16
author: 
  - name: Zhengjia Wang
    orcid: 0000-0001-5629-1116
    affiliations: 
      - name: "Dept. of Neurosurgery, University of Pennsylvania"
categories:
  - "3D Viewer"
  - "Interactive Module"
copyright: 
  holder: Zhengjia Wang
  year: 2024
execute:
  freeze: false
webr:
  packages: ['raveio']
  repos: 
    - 'https://rave-ieeg.r-universe.dev'
    - 'https://dipterix.r-universe.dev'
    - 'https://repo.r-wasm.org/'
  version: 0.4.2
  channel-type: "service-worker"
  autoload-packages: false
  mount-url: 
    # - meta: "http://localhost:4834/samples/project-demo-minimal.js.metadata"
    #   data: "http://localhost:4834/samples/project-demo-minimal.data"
    #   path: "/home/web_user/rave_data"
    - meta: "https://zenodo.org/api/records/13825852/files/project-demo-minimal.js.metadata/content"
      data: "https://zenodo.org/api/records/13825852/files/project-demo-minimal.data/content"
      path: "/home/web_user/rave_data"
---

::: {.alert .alert-warning role="alert"}
This post contains interactive components (experimental) that allows you to execute RAVE code from the web browsers. If you would like to try this feature and customize/play with the code, please be patient. It might take a while for the browser to finish setting up (depending on your network speed). Once the script is ready, you will see "WEBR STATUS: ðŸŸ¢ Ready!" in the above banner.

```{webr-r}
#| context: setup
#| autorun: true
# webr::mount(
      # - meta: "http://localhost:3530/samples/project-demo-minimal.js.metadata"
    #   data: "http://localhost:3530/samples/project-demo-minimal.data"
    #   path: "/home/web_user/rave_data"
# )
brain <- raveio::rave_brain("demo/DemoSubject")
```
:::

## Prerequisites

This post assumes that you have already imported subject's imaging data to RAVE and finished the electrode localization. If you haven't done so, please im.

## 1. Simple 3D viewer

Library `raveio` provides simple high-level function [`rave_brain`](#function-rave_brain) to load 3D brain object.

```{webr-r}
#| editor-max-height: 500
#| editor-quick-suggestions: TRUE
brain <- raveio::rave_brain("demo/DemoSubject")

# See the output to the right for what's inside of the brain object
brain
```

Use `brain$plot(<your arguments...>)` to show the viewer:

```{webr-r}
#| editor-max-height: 500
#| editor-quick-suggestions: TRUE
brain$plot()
```

![Preview of the result. See below if you want to play with the 3D viewer interactively](preview-1.png){fig-align="center" width="100%"}

## 2. Render electrodes with values

`brain$set_electrode_values(table_or_path)` allows users to load a data table and render electrodes with colors. Users can create a `csv` table using Excel or their favorite programming languages, as long as the table follows the following format:

| Subject     | Electrode | varname\* |
|:------------|----------:|----------:|
| DemoSubject |         1 |      0.25 |
| DemoSubject |        14 |      -0.4 |
| ...         |       ... |       ... |

Here is the explanation of the columns (case-sensitive):

-   `Subject` is the subject code
-   `Electrode` is the electrode channel number (integer)
-   `varname*` can be almost anything (give it a meaningful name, for e.g., `Power`, `Cluster`, ...) that you would like to show, and the values can be either numeric or categorical
    -   The variable name is recommended to only contain letters and digits. For example, `BetaBandPower` seems to be a good idea, while names like `75-150 Hz` should be avoided
    -   The variable values must not be numerical if the intent is categorical. For example cluster values such as `1`, `2`, `3`, ... should be avoided and users should use `Cluster 1`, `Cluster 2`, `Cluster 3`, ..., or `A`, `B`, `C`, ... instead

Here's an example data table

```{webr-r}
#| editor-max-height: 500
#| editor-quick-suggestions: TRUE
data_table <- data.frame(
    Subject = "DemoSubject",
    Electrode = c(13,14,15,16,24),
    ContinuousValue = runif(5),
    Categorical = letters[c(1,2,3,2,3)]
)

brain$set_electrode_values(data_table)

brain$plot()
```

![**Left**: continuous values with symmetric value range. The color palette transition from blue to white to red (default); **Right**: Categorical data with default color palette](preview-2.png){width="100%"}

## 3. Render options

`brain$plot` allows users to provide render options to change the following components:

-   Color palette
-   Default value ranges (for continuous data)
-   Control panels

Here's a full example:

```{webr-r}
#| editor-max-height: 500
#| editor-quick-suggestions: TRUE
#| column: page
# Load brain
brain <- raveio::rave_brain("demo/DemoSubject")

# Set values with 2 variables: `ContinuousVal` and `CategoricalVal`
brain$set_electrode_values(
  data.frame(
    Subject = "DemoSubject",
    Electrode = c(13:16,24,73:80),
    ContinuousVal = rnorm(13),
    CategoricalVal = sample(letters[1:4], size = 13, replace = TRUE),
    PValue = c(0.15, 0.5, 0.9, 0.01, 0.05, 0.45, 0.8,
               0.68, 0.6, 0.33, 0.001, 0.36, 0.83)
  )
)

# Plot brain with options
brain$plot(
  
  # change color palettes: each variable requires a palette (if not default)
  palettes = list(
    
    # discrete values require each category to be filled with a 
    # color. The order is alphabetic
    CategoricalVal = c("red", "blue", "green"),
    
    # continuous values requires at least 2 key colors
    ContinuousVal = c("white", "purple"),
    
    # p-value is not linearly scaled, R provides `colorRampPalette`
    # to generate non-linear color palette from at least 
    # 3 key colors. 
    # This example used 5 key colors with bias = 2 so the
    PValue = colorRampPalette(
      c("red", "yellow", "cyan", "gray", "gray"), bias = 2
    )(100)
    
  ),
  
  # Change value range: sets the value range for variables that have
  # bounded ranges, such as p-values
  value_ranges = list(
    
    # p-value should range from 0-1 
    PValue = c(0, 1),
    
    # We also want to trim the `ContinuousVal` to 95% CI
    ContinuousVal = c(-2, 2)
    
  ),
  
  # Set initial controller status
  controllers = list(
    
    # Display p-value 
    "Display Data" = "PValue",
    
    
    # Overlay atlases from side canvas
    "Voxel Type" = "aparc_aseg",
    "Voxel Display" = "side camera",
    
    # Overlay axial slices with surfaces
    "Overlay Axial" = TRUE,
    
    # Set surface opacity
    "Left Opacity" = 0.4,
    "Left Mesh Clipping" = 0.3,
    "Right Opacity" = 0.4,
    "Right Mesh Clipping" = 0.3,
    
    # Electrode outline
    "Outlines" = "on",
    "Translucent" = "contact+outline",
    
    # Background color and camera position
    "Background Color" = "#000000",
    "Camera Position" = "superior"
    
  )
  
)
```

## Key Documentations

### Function `raveio::rave_brain` {#function-rave_brain}

```{r, echo = FALSE, results='asis'}
.help_text("rave_brain", package = "raveio")
```
