{
  "hash": "deee89f0063d7389f03fd44b5eebabee",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Customize 3D Viewer Color Palette\"\ndescription: |\n  Create basic 3D viewer and render with colors\ndate: 2024-09-16\nauthor: \n  - name: Zhengjia Wang\n    orcid: 0000-0001-5629-1116\n    affiliations: \n      - name: \"Dept. of Neurosurgery, University of Pennsylvania\"\ncategories:\n  - \"3D Viewer\"\n  - \"Interactive Module\"\ncopyright: \n  holder: Zhengjia Wang\n  year: 2024\nwebr:\n  packages: ['raveio']\n  repos: \n    - 'https://rave-ieeg.r-universe.dev'\n    - 'https://dipterix.r-universe.dev'\n    - 'https://repo.r-wasm.org/'\n  version: 0.4.2\n  channel-type: \"service-worker\"\n  autoload-packages: false\n---\n\n\n::: {.alert .alert-warning role=\"alert\"}\nThis post contains interactive components (experimental) that allows you to execute RAVE code from the web browsers. If you would like to try this feature and customize/play with the code, please be patient. \nIt might take a while for the browser to finish setting up (depending on your network speed).\nOnce the script is ready, you will see \"WEBR STATUS: ðŸŸ¢ Ready!\" in the above banner. \n\n```{webr-r}\n#| context: setup\n#| autorun: true\n# Let's mount a demo data to your browser:\nif(!dir.exists(\"~/rave_data/data_dir/demo\")) {\n  webr::mount(\n    normalizePath(\"~/rave_data\", mustWork = FALSE),\n    \"https://rave.wiki/samples/project-demo-minimal.data.gz\"\n  )\n}\nbrain <- raveio::rave_brain(\"demo/DemoSubject\")\n```\n\n:::\n\n## Prerequisites\n\n\nThis post assumes that you have already imported subject's imaging data to RAVE and finished the electrode localization. If you haven't done so, please check (TODO) for instructions.\n\n## 1. Simple 3D viewer\n\nLibrary `raveio` provides simple high-level function [`rave_brain`](#function-rave_brain) to load 3D brain object.\n\n```{webr-r}\n#| editor-max-height: 500\n#| editor-quick-suggestions: TRUE\nbrain <- raveio::rave_brain(\"demo/DemoSubject\")\n\n# See the output to the right for what's inside of the brain object\nbrain\n```\n\nUse `brain$plot(<your arguments...>)` to show the viewer:\n\n```{webr-r}\n#| editor-max-height: 500\n#| editor-quick-suggestions: TRUE\nbrain$plot()\n```\n\n![Preview of the result. See below if you want to play with the 3D viewer interactively](preview-1.png){fig-align=\"center\" width=\"100%\"}\n\n## 2. Render electrodes with values\n\n`brain$set_electrode_values(table_or_path)` allows users to load a data table and render electrodes with colors. Users can create a `csv` table using Excel or their favorite programming languages, as long as the table follows the following format:\n\n| Subject     | Electrode | varname\\* |\n|:------------|----------:|----------:|\n| DemoSubject |         1 |      0.25 |\n| DemoSubject |        14 |      -0.4 |\n| ...         |       ... |       ... |\n\nHere is the explanation of the columns (case-sensitive):\n\n-   `Subject` is the subject code\n-   `Electrode` is the electrode channel number (integer)\n-   `varname*` can be almost anything (give it a meaningful name, for e.g., `Power`, `Cluster`, ...) that you would like to show, and the values can be either numeric or categorical\n    -   The variable name is recommended to only contain letters and digits. For example, `BetaBandPower` seems to be a good idea, while names like `75-150 Hz` should be avoided\n    -   The variable values must not be numerical if the intent is categorical. For example cluster values such as `1`, `2`, `3`, ... should be avoided and users should use `Cluster 1`, `Cluster 2`, `Cluster 3`, ..., or `A`, `B`, `C`, ... instead\n\nHere's an example data table\n\n```{webr-r}\n#| editor-max-height: 500\n#| editor-quick-suggestions: TRUE\ndata_table <- data.frame(\n    Subject = \"DemoSubject\",\n    Electrode = c(13,14,15,16,24),\n    ContinuousValue = runif(5),\n    Categorical = letters[c(1,2,3,2,3)]\n)\n\nbrain$set_electrode_values(data_table)\n\nbrain$plot()\n```\n\n![**Left**: continuous values with symmetric value range. The color palette transition from blue to white to red (default); **Right**: Categorical data with default color palette](preview-2.png){width=\"100%\"}\n\n## 3. Render options\n\n`brain$plot` allows users to provide render options to change the following components:\n\n-   Color palette\n-   Default value ranges (for continuous data)\n-   Control panels\n\nHere's a full example:\n\n```{webr-r}\n#| editor-max-height: 500\n#| editor-quick-suggestions: TRUE\n#| column: page\n# Load brain\nbrain <- raveio::rave_brain(\"demo/DemoSubject\")\n\n# Set values with 2 variables: `ContinuousVal` and `CategoricalVal`\nbrain$set_electrode_values(\n  data.frame(\n    Subject = \"DemoSubject\",\n    Electrode = c(13:16,24,73:80),\n    ContinuousVal = rnorm(13),\n    CategoricalVal = sample(letters[1:4], size = 13, replace = TRUE),\n    PValue = c(0.15, 0.5, 0.9, 0.01, 0.05, 0.45, 0.8,\n               0.68, 0.6, 0.33, 0.001, 0.36, 0.83)\n  )\n)\n\n# Plot brain with options\nbrain$plot(\n  \n  # change color palettes: each variable requires a palette (if not default)\n  palettes = list(\n    \n    # discrete values require each category to be filled with a \n    # color. The order is alphabetic\n    CategoricalVal = c(\"red\", \"blue\", \"green\"),\n    \n    # continuous values requires at least 2 key colors\n    ContinuousVal = c(\"white\", \"purple\"),\n    \n    # p-value is not linearly scaled, R provides `colorRampPalette`\n    # to generate non-linear color palette from at least \n    # 3 key colors. \n    # This example used 5 key colors with bias = 2 so the\n    PValue = colorRampPalette(\n      c(\"red\", \"yellow\", \"cyan\", \"gray\", \"gray\"), bias = 2\n    )(100)\n    \n  ),\n  \n  # Change value range: sets the value range for variables that have\n  # bounded ranges, such as p-values\n  value_ranges = list(\n    \n    # p-value should range from 0-1 \n    PValue = c(0, 1),\n    \n    # We also want to trim the `ContinuousVal` to 95% CI\n    ContinuousVal = c(-2, 2)\n    \n  ),\n  \n  # Set initial controller status\n  controllers = list(\n    \n    # Display p-value \n    \"Display Data\" = \"PValue\",\n    \n    \n    # Overlay atlases from side canvas\n    \"Voxel Type\" = \"aparc_aseg\",\n    \"Voxel Display\" = \"side camera\",\n    \n    # Overlay axial slices with surfaces\n    \"Overlay Axial\" = TRUE,\n    \n    # Set surface opacity\n    \"Left Opacity\" = 0.4,\n    \"Left Mesh Clipping\" = 0.3,\n    \"Right Opacity\" = 0.4,\n    \"Right Mesh Clipping\" = 0.3,\n    \n    # Electrode outline\n    \"Outlines\" = \"on\",\n    \"Translucent\" = \"contact+outline\",\n    \n    # Background color and camera position\n    \"Background Color\" = \"#000000\",\n    \"Camera Position\" = \"superior\"\n    \n  )\n  \n)\n```\n\n## Key Documentations\n\n### Function `raveio::rave_brain` {#function-rave_brain}\n\n\n\n<p>Load 'FreeSurfer' or 'AFNI/SUMA' brain from 'RAVE'</p>\n\n\n\nrave_brain\n\n<h3>Description</h3>\n\n<p>Create 3D visualization of the brain and visualize with\nmodern web browsers\n</p>\n\n\n<h3>Usage</h3>\n\n<pre><code class='language-R'>rave_brain(\n  subject,\n  surfaces = \"pial\",\n  use_141 = TRUE,\n  recache = FALSE,\n  clean_before_cache = FALSE,\n  compute_template = FALSE,\n  usetemplateifmissing = FALSE,\n  include_electrodes = TRUE\n)\n</code></pre>\n\n\n<h3>Arguments</h3>\n\n<table>\n<tr><td><code id=\"subject\">subject</code></td>\n<td>\n<p>character, list, or <code>RAVESubject</code> instance; for\nlist or other objects, make sure <code>subject$subject_id</code> is a valid 'RAVE'\nsubject 'ID'</p>\n</td></tr>\n<tr><td><code id=\"surfaces\">surfaces</code></td>\n<td>\n<p>one or more brain surface types from <code>\"pial\"</code>,\n<code>\"white\"</code>, <code>\"smoothwm\"</code>, <code>\"pial-outer-smoothed\"</code>, etc.;\ncheck <code>freesurfer_brain2</code></p>\n</td></tr>\n<tr><td><code id=\"use_141\">use_141</code></td>\n<td>\n<p>whether to use 'AFNI/SUMA' standard 141 brain</p>\n</td></tr>\n<tr><td><code id=\"recache\">recache</code></td>\n<td>\n<p>whether to re-calculate cache; only should be used when\nthe original 'FreeSurfer' or 'AFNI/SUMA' files are changed; such as new\nfiles are added</p>\n</td></tr>\n<tr><td><code id=\"clean_before_cache\">clean_before_cache</code></td>\n<td>\n<p>whether to clean the original cache before\n<code>recache</code>; only set it to be true if original cached files are\ncorrupted</p>\n</td></tr>\n<tr><td><code id=\"compute_template\">compute_template</code></td>\n<td>\n<p>whether to compute template mappings; useful when\ntemplate mapping with multiple subjects are needed</p>\n</td></tr>\n<tr><td><code id=\"usetemplateifmissing\">usetemplateifmissing</code></td>\n<td>\n<p>whether to use template brain when the subject\nbrain files are missing. If set to true, then a template (usually 'N27')\nbrain will be displayed as an alternative solution, and electrodes will be\nrendered according to their <code>'MNI305'</code> coordinates, or\n<code>'VertexNumber'</code> if given.</p>\n</td></tr>\n<tr><td><code id=\"include_electrodes\">include_electrodes</code></td>\n<td>\n<p>whether to include electrode in the model; default\nis true</p>\n</td></tr>\n</table>\n\n\n<h3>Value</h3>\n\n<p>A <code>'threeBrain'</code> instance if brain is found or\n<code>usetemplateifmissing</code> is set to true; otherwise returns <code>NULL</code>\n</p>\n\n\n<h3>Examples</h3>\n\n<pre><code class='language-R'>\n\n# Please make sure DemoSubject is correctly installed\n# The subject is ~1GB from Github\n\nif(interactive()){\n  brain &lt;- rave_brain(\"demo/DemoSubject\")\n\n  if( !is.null(brain) ) { brain$plot() }\n\n}\n\n\n</code></pre>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}