[
  {
    "objectID": "posts/signal_processing/signal-filter.html#preparation",
    "href": "posts/signal_processing/signal-filter.html#preparation",
    "title": "Basic Signal Filters",
    "section": "1. Preparation",
    "text": "1. Preparation\nLet’s load the package and generate a sample signal. The signal is a mixture of 2Hz, 10Hz, 60Hz, and noise\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "posts/signal_processing/signal-filter.html#fir-filter",
    "href": "posts/signal_processing/signal-filter.html#fir-filter",
    "title": "Basic Signal Filters",
    "section": "2. FIR Filter",
    "text": "2. FIR Filter\nConstruct a FIR filter with low pass at 3Hz and (around) 0.5Hz transition bandwidth:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nApply the filter to the signal x using filtfilt method:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "posts/installation/installation.html",
    "href": "posts/installation/installation.html",
    "title": "Installation Guide",
    "section": "",
    "text": "Please read and install the prerequisites.\n❗The most common installation problem is that the prerequisites are not installed.❗\n\nChoose your operating system:\n\n\n\n\nMacOS requires users to have administrator (admin) privileges to install applications. At several points during the installation, MacOS will ask for your account password to verify installation. Installation will fail if your MacOS account doesn’t have admin privileges.\n\nHow to check if I have an admin account?\n\nOpen Terminal (in the /Applications/Utilities folder). Copy the command line shown below into the terminal window.\n sudo ls\nYou will be prompted for a password. This is the password of the MacOS account you are logged in as. If you have an admin account, MacOS will show the files in the current directory. If not, you will receive an error message. Alternately, click anywhere on the desktop to activate the MacOS menu bar, click on the Apple icon at the top left of the menu bar, then “System Preferences” or “System Settings”, then “Users & Groups”. Find your current account and verify that it has admin privileges.\n\nWhat if I don’t have an admin account?\n\nYou will need to create a new account with admin privileges or change the privileges of your current account, see https://support.apple.com/guide/mac-help/change-users-groups-settings-mtusr001/mac . If your computer is administered by others, ask them to create an admin account for you.\n\n\n\nClick here to install the latest version of the R language for Mac. Find the latest package (.pkg) file, click to download, then open and install. There are different versions of R for older Macs with Intel CPUs and newer Macs with Apple CPUs (M1/M2). Choose the correct version, either “Intel 64-bit” or “Apple silicon ARM64”.\nTo verify R installation: R will be installed in the /Applications folder. Open this folder and double-click on the R icon to start R. After starting R, we recommend that you right-click on the R icon in the Dock and select “Options”/“Keep in Dock” to make it easier to launch with a single click. We also recommend starting R, opening the “Preferences”/“Startup” tab, and change “Save workspace on exit from”R” to “No”. Uncheck the box “Read history file on startup”. To check the current version of “R”, start R and enter the following into the console:\nR.version\nThis will produce a number of lines of output, beginning with something like\n platform       x86_64-apple-darwin17.0     \n arch           x86_64\n\n\n\nInstallation requires the latest version of the homebrew package manager. Open Terminal (in the /Applications/Utilities folder). Copy the command line shown below into the terminal window.\n/usr/bin/env bash\nCopy the line below into the terminal window.\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\nThis step will take several minutes to complete. Wait until the installation is finished and the command prompt reappears before moving to the next step.\nAdd brew to your path or the next installation steps will fail. The installer provides the necessary command lines in the Terminal window at the conclusion of the previous step. Execute them in the same terminal window by copying and pasting. They will look something like\necho 'eval \"$(/opt/homebrew/bin/brew shellenv)\"' &gt;&gt; ~/.zprofile\neval \"$(/opt/homebrew/bin/brew shellenv)\"\nThese commands will not produce any output.\nTo verify brew installation: Copy the command line shown below into the terminal window.\nbrew --version\nShould produce a result like\n Homebrew 3.4.1\n Homebrew/homebrew-core (git revision f03c984ad7; last commit 2022-03-08)\n\n\n\nEnter this command into the terminal window:\nbrew install hdf5 fftw pkg-config cmake libpng\nThis step will install the hdf5 (high-performance file system), fftw (fast-fourier transform library), pkg-config (package configuration toolbox), cmake (cross-platform make for compiling optional packages such as ant), libpng (library for manipulating png images) and takes several minutes to complete. Wait until the installation is finished and the command prompt reappears before moving to the next step.\n\n\n\nScroll to the top of the page and click on the “Install” tab to return to the full installation guide.\n\n\n\nYou may receive this message\n Warning: macOS is reporting that you have not yet agreed to the Xcode license. This can occur if Xcode has been updated or reinstalled (e.g. as part of a macOS update). Some features (e.g. Git / SVN) may be disabled.\nTo make this error go away, open the Terminal app in the Applications folder, enter\nsudo xcodebuild -license accept\nThen restart RStudio. A helpful article in case of XCode installation errors.\nIf the XCode download from the RStudio install in step 2 fails, install the command line tools manually. First, download XCode. Click “GET” (if instead you see “OPEN”, then Xcode is already installed.) Open the Terminal app in the Applications folder, enter\nxcode-select --install\nClick “yes” to proceed with installing the command-line tools. The message “xcode-select: error: command line tools are already installed” means that you can proceed.\n\n\n\nThese instructions are for Windows 10 with “bash” enabled. You will be asked many questions by the installers; the default response is fine for all of them.\n\n\nGo to https://cran.r-project.org/bin/windows/base/ and download the latest R.\nOpen the installer and click through to install\n\n\n\nGo to https://cran.r-project.org/bin/windows/Rtools/ and download a proper version of RTools. The version must match your version of R. RTools contains compilers used to compile packages\n\n\n\n\nIf you encounter difficulties, email help@rave.wiki.\n\nTo install R, please go to https://cran.r-project.org/ and read installation guide for Linux system. The following guide is for Ubuntu 20.x (x86_64) system. Please do ALWAYS read R’s official installation guide.\n\n\nOpen terminal (if you don’t know how, look at your sidebar in Ubuntu, search your computer enter terminal, and open it), type the following code:\n# update indices\nsudo apt update -qq\n# install two helper packages we need\nsudo apt install --no-install-recommends software-properties-common dirmngr\n# add the signing key (by Michael Rutter) for these repos\n# To verify key, run gpg --show-keys /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc \n# Fingerprint: E298A3A825C0D65DFD57CBB651716619E084DAB9\nwget -qO- https://cloud.r-project.org/bin/linux/ubuntu/marutter_pubkey.asc | sudo tee -a /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc\n# add the R 4.0 repo from CRAN -- adjust 'focal' to 'groovy' or 'bionic' as needed\nsudo add-apt-repository \"deb https://cloud.r-project.org/bin/linux/ubuntu $(lsb_release -cs)-cran40/\"\n\n\n\nCopy the following command line by line into your terminal and run\nsudo apt-get install r-base r-base-dev\n\n\n\nCopy the following command line by line into your terminal and run\ninstall.packages('ravemanager', repos = 'https://rave-ieeg.r-universe.dev')\nravemanager::system_requirements(sudo = TRUE)\nIf your operating system is supported, it will print out all the system libraries needed.\n\n\n\nOpen a new terminal window, copy the installation script generated from the last step into this new window. For example, on Ubuntu 20.x,\nsudo apt-get install -y build-essential file git psmisc procps sudo wget make cmake \\\n libsodium-dev libffi-dev libbz2-dev libpcre2-dev libcairo2-dev libssh2-1-dev libtiff5-dev libv8-dev \\\n libicu-dev zlib1g-dev libcurl4-openssl-dev libssl-dev libfontconfig1-dev libfreetype6-dev \\\n libfribidi-dev libharfbuzz-dev libjpeg-dev libpng-dev libtiff-dev pandoc libxml2-dev git libgit2-dev \\\n libfftw3-dev libhdf5-dev libglpk-dev libgmp3-dev libzmq3-dev python3\nThe packages libv8-dev is for V8 package to enable JavaScript. libxml2-dev is for xml2. libfftw3-dev libtiff5-dev are necessary for fast-fourier transformations and libhdf5-dev is for reading and writing data in open data format HDF5. All the other packages are necessary for devtools (compilers)\n\n\n\nGo to https://posit.co/download/rstudio-desktop/ and download one with keywords “Ubuntu xxx/Debian xxx” (depending on your system version), move the downloaded file to your desktop, rename it “rstudio.deb”.\nOpen terminal, type the following command in your terminal\ncd ~/Desktop\nsudo dpkg -i ./rstudio.deb \nand RStudio should be in your application list. If not, look at your sidebar in Ubuntu, click search your computer and enter “RStudio”."
  },
  {
    "objectID": "posts/installation/installation.html#step-1-install-prerequisites",
    "href": "posts/installation/installation.html#step-1-install-prerequisites",
    "title": "Installation Guide",
    "section": "",
    "text": "Please read and install the prerequisites.\n❗The most common installation problem is that the prerequisites are not installed.❗\n\nChoose your operating system:\n\n\n\n\nMacOS requires users to have administrator (admin) privileges to install applications. At several points during the installation, MacOS will ask for your account password to verify installation. Installation will fail if your MacOS account doesn’t have admin privileges.\n\nHow to check if I have an admin account?\n\nOpen Terminal (in the /Applications/Utilities folder). Copy the command line shown below into the terminal window.\n sudo ls\nYou will be prompted for a password. This is the password of the MacOS account you are logged in as. If you have an admin account, MacOS will show the files in the current directory. If not, you will receive an error message. Alternately, click anywhere on the desktop to activate the MacOS menu bar, click on the Apple icon at the top left of the menu bar, then “System Preferences” or “System Settings”, then “Users & Groups”. Find your current account and verify that it has admin privileges.\n\nWhat if I don’t have an admin account?\n\nYou will need to create a new account with admin privileges or change the privileges of your current account, see https://support.apple.com/guide/mac-help/change-users-groups-settings-mtusr001/mac . If your computer is administered by others, ask them to create an admin account for you.\n\n\n\nClick here to install the latest version of the R language for Mac. Find the latest package (.pkg) file, click to download, then open and install. There are different versions of R for older Macs with Intel CPUs and newer Macs with Apple CPUs (M1/M2). Choose the correct version, either “Intel 64-bit” or “Apple silicon ARM64”.\nTo verify R installation: R will be installed in the /Applications folder. Open this folder and double-click on the R icon to start R. After starting R, we recommend that you right-click on the R icon in the Dock and select “Options”/“Keep in Dock” to make it easier to launch with a single click. We also recommend starting R, opening the “Preferences”/“Startup” tab, and change “Save workspace on exit from”R” to “No”. Uncheck the box “Read history file on startup”. To check the current version of “R”, start R and enter the following into the console:\nR.version\nThis will produce a number of lines of output, beginning with something like\n platform       x86_64-apple-darwin17.0     \n arch           x86_64\n\n\n\nInstallation requires the latest version of the homebrew package manager. Open Terminal (in the /Applications/Utilities folder). Copy the command line shown below into the terminal window.\n/usr/bin/env bash\nCopy the line below into the terminal window.\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\nThis step will take several minutes to complete. Wait until the installation is finished and the command prompt reappears before moving to the next step.\nAdd brew to your path or the next installation steps will fail. The installer provides the necessary command lines in the Terminal window at the conclusion of the previous step. Execute them in the same terminal window by copying and pasting. They will look something like\necho 'eval \"$(/opt/homebrew/bin/brew shellenv)\"' &gt;&gt; ~/.zprofile\neval \"$(/opt/homebrew/bin/brew shellenv)\"\nThese commands will not produce any output.\nTo verify brew installation: Copy the command line shown below into the terminal window.\nbrew --version\nShould produce a result like\n Homebrew 3.4.1\n Homebrew/homebrew-core (git revision f03c984ad7; last commit 2022-03-08)\n\n\n\nEnter this command into the terminal window:\nbrew install hdf5 fftw pkg-config cmake libpng\nThis step will install the hdf5 (high-performance file system), fftw (fast-fourier transform library), pkg-config (package configuration toolbox), cmake (cross-platform make for compiling optional packages such as ant), libpng (library for manipulating png images) and takes several minutes to complete. Wait until the installation is finished and the command prompt reappears before moving to the next step.\n\n\n\nScroll to the top of the page and click on the “Install” tab to return to the full installation guide.\n\n\n\nYou may receive this message\n Warning: macOS is reporting that you have not yet agreed to the Xcode license. This can occur if Xcode has been updated or reinstalled (e.g. as part of a macOS update). Some features (e.g. Git / SVN) may be disabled.\nTo make this error go away, open the Terminal app in the Applications folder, enter\nsudo xcodebuild -license accept\nThen restart RStudio. A helpful article in case of XCode installation errors.\nIf the XCode download from the RStudio install in step 2 fails, install the command line tools manually. First, download XCode. Click “GET” (if instead you see “OPEN”, then Xcode is already installed.) Open the Terminal app in the Applications folder, enter\nxcode-select --install\nClick “yes” to proceed with installing the command-line tools. The message “xcode-select: error: command line tools are already installed” means that you can proceed.\n\n\n\nThese instructions are for Windows 10 with “bash” enabled. You will be asked many questions by the installers; the default response is fine for all of them.\n\n\nGo to https://cran.r-project.org/bin/windows/base/ and download the latest R.\nOpen the installer and click through to install\n\n\n\nGo to https://cran.r-project.org/bin/windows/Rtools/ and download a proper version of RTools. The version must match your version of R. RTools contains compilers used to compile packages\n\n\n\n\nIf you encounter difficulties, email help@rave.wiki.\n\nTo install R, please go to https://cran.r-project.org/ and read installation guide for Linux system. The following guide is for Ubuntu 20.x (x86_64) system. Please do ALWAYS read R’s official installation guide.\n\n\nOpen terminal (if you don’t know how, look at your sidebar in Ubuntu, search your computer enter terminal, and open it), type the following code:\n# update indices\nsudo apt update -qq\n# install two helper packages we need\nsudo apt install --no-install-recommends software-properties-common dirmngr\n# add the signing key (by Michael Rutter) for these repos\n# To verify key, run gpg --show-keys /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc \n# Fingerprint: E298A3A825C0D65DFD57CBB651716619E084DAB9\nwget -qO- https://cloud.r-project.org/bin/linux/ubuntu/marutter_pubkey.asc | sudo tee -a /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc\n# add the R 4.0 repo from CRAN -- adjust 'focal' to 'groovy' or 'bionic' as needed\nsudo add-apt-repository \"deb https://cloud.r-project.org/bin/linux/ubuntu $(lsb_release -cs)-cran40/\"\n\n\n\nCopy the following command line by line into your terminal and run\nsudo apt-get install r-base r-base-dev\n\n\n\nCopy the following command line by line into your terminal and run\ninstall.packages('ravemanager', repos = 'https://rave-ieeg.r-universe.dev')\nravemanager::system_requirements(sudo = TRUE)\nIf your operating system is supported, it will print out all the system libraries needed.\n\n\n\nOpen a new terminal window, copy the installation script generated from the last step into this new window. For example, on Ubuntu 20.x,\nsudo apt-get install -y build-essential file git psmisc procps sudo wget make cmake \\\n libsodium-dev libffi-dev libbz2-dev libpcre2-dev libcairo2-dev libssh2-1-dev libtiff5-dev libv8-dev \\\n libicu-dev zlib1g-dev libcurl4-openssl-dev libssl-dev libfontconfig1-dev libfreetype6-dev \\\n libfribidi-dev libharfbuzz-dev libjpeg-dev libpng-dev libtiff-dev pandoc libxml2-dev git libgit2-dev \\\n libfftw3-dev libhdf5-dev libglpk-dev libgmp3-dev libzmq3-dev python3\nThe packages libv8-dev is for V8 package to enable JavaScript. libxml2-dev is for xml2. libfftw3-dev libtiff5-dev are necessary for fast-fourier transformations and libhdf5-dev is for reading and writing data in open data format HDF5. All the other packages are necessary for devtools (compilers)\n\n\n\nGo to https://posit.co/download/rstudio-desktop/ and download one with keywords “Ubuntu xxx/Debian xxx” (depending on your system version), move the downloaded file to your desktop, rename it “rstudio.deb”.\nOpen terminal, type the following command in your terminal\ncd ~/Desktop\nsudo dpkg -i ./rstudio.deb \nand RStudio should be in your application list. If not, look at your sidebar in Ubuntu, click search your computer and enter “RStudio”."
  },
  {
    "objectID": "posts/installation/installation.html#step-2-install-rave-for-the-first-time",
    "href": "posts/installation/installation.html#step-2-install-rave-for-the-first-time",
    "title": "Installation Guide",
    "section": "Step 2: Install RAVE for the First Time",
    "text": "Step 2: Install RAVE for the First Time\nIf you have installed RAVE before, please check How to update RAVE.\n\nOpen the R application if it is not already open (RStudio may also be used). Copy and paste the following command into the R (or RStudio) console:\n\ninstall.packages('ravemanager', repos = 'https://rave-ieeg.r-universe.dev')\n\nCopy and paste the following command into the R console:\n\nravemanager::install()\nWait until you see the “Done finalizing installations!” message and the R Console command prompt reappears. This may take a few minutes depending on the speed of your internet connection. After installation, it is recommended to close all instances of R and restart R.\n\nHere is a list of common problems you might encounter during the installlation.\n\nThe following packages are found that cannot be unloaded…\n\nSome processes are still using RAVE scripts. Please make sure all R and RStudio windows are closed. Close them, re-open, and retry the installation.\n\n[ravemanager] The installer’s major version has been updated (from xxx -&gt; xxx)…\n\nPlease make sure all R and RStudio windows are closed. Close them, re-open, and retry the installation.\n\nYour R version (xxx) is too low….\n\nR major version is too low, return to install the prerequisites (see Step 1)."
  },
  {
    "objectID": "posts/installation/installation.html#step-3-launch-rave",
    "href": "posts/installation/installation.html#step-3-launch-rave",
    "title": "Installation Guide",
    "section": "Step 3: Launch RAVE",
    "text": "Step 3: Launch RAVE\nCopy and paste the following command into the R console:\nrave::start_rave2()\nIn a few seconds a web browser window showing RAVE should appear. Success! Explore RAVE by clicking on one of the module names on the left-hand side such as “Subject 3D Viewer” to view a brain or “Power Explorer” to view sample iEEG data."
  },
  {
    "objectID": "posts/installation/installation.html#step-4-analyze-your-data-with-rave",
    "href": "posts/installation/installation.html#step-4-analyze-your-data-with-rave",
    "title": "Installation Guide",
    "section": "Step 4: Analyze your data with RAVE",
    "text": "Step 4: Analyze your data with RAVE\nThe RAVE team is happy to help users get up and running with their own data. Email help@rave.wiki to schedule a Zoom session to get help analyzing your own data.\n\n\n(optional but recommended): Install Isolated Python Environment\nCopy and paste the following command into the “R” console:\nravemanager::configure_python()\nSome advanced RAVE features (such as CT to MRI alignment via ANTs) call Python libraries. To prevent conflicts with existing Python installations and ensure stability and reliability, this step uses Miniconda to install an isolated Python environment and useful Python packages (numpy, scipy, jupyterlab, mne, pynwb, antspyx)."
  },
  {
    "objectID": "posts/electrode_localization/yael.html",
    "href": "posts/electrode_localization/yael.html",
    "title": "YAEL - Your Advanced Electrode Localizer",
    "section": "",
    "text": "Electrode localization is a critical step for getting spatial information of iEEG and DBS electrodes. YAEL (Your Advanced Electrode Localizer) provides a fully integrated pipeline that takes in raw DICOM or NIfTI images and outputs the electrode coordinates and atlas labels. The pipeline is divided into two parts:\n\nInput: T1 pre-operative MRI and post-surgery CT\nStep 1: Imaging preprocess\nStep 2: Interactive 3D electrode localization\nOutput: electrode coordinate table and RAVE 3D viewer\n\nFor more high-level information, please check our paper. Click on the ‘Prerequisites’ button to check data and system requirements:\n\n\n\nThe full pipeline requires T1 MRI (pre-op) and CT (post-op) with electrodes implanted. YAEL supports either DICOM or NIfTI imaging formats.\n\n\n\nSome methods such as ANTs for CT-MR co-registration are developed in Python. We highly recommend that you run the following R command:\nravemanager::validate_python()\n#&gt; Initializing python environment: \n...\n#&gt;  ants: 0.5.3\nIf you see output ants: followed by a valid version number, that means ANTs is properly configured, otherwise run the following command to configure. RAVE will create an isolated Python environment that will not affect your current system.\nravemanager::configure_python()\nPlease make sure the computer has access to the internet.\n\n\n\nFreeSurfer is highly recommended if you want to reconstruct brain surface models. The program also comes with commonly used brain parcelation and sub-cortical segmentation methods. Please check their official website on how to download and configure. Make sure you also register and download a license file (it’s free):\n\nDownload page: https://surfer.nmr.mgh.harvard.edu/fswiki/DownloadAndInstall\nFree license application: https://surfer.nmr.mgh.harvard.edu/registration.html\n\nIf you are using Windows, please consider using docker https://hub.docker.com/r/freesurfer/freesurfer to run FreeSurfer reconstruction on your own. See (TBD) for how to bring your own FreeSurfer folder to YAEL."
  },
  {
    "objectID": "posts/electrode_localization/yael.html#overview",
    "href": "posts/electrode_localization/yael.html#overview",
    "title": "YAEL - Your Advanced Electrode Localizer",
    "section": "",
    "text": "Electrode localization is a critical step for getting spatial information of iEEG and DBS electrodes. YAEL (Your Advanced Electrode Localizer) provides a fully integrated pipeline that takes in raw DICOM or NIfTI images and outputs the electrode coordinates and atlas labels. The pipeline is divided into two parts:\n\nInput: T1 pre-operative MRI and post-surgery CT\nStep 1: Imaging preprocess\nStep 2: Interactive 3D electrode localization\nOutput: electrode coordinate table and RAVE 3D viewer\n\nFor more high-level information, please check our paper. Click on the ‘Prerequisites’ button to check data and system requirements:\n\n\n\nThe full pipeline requires T1 MRI (pre-op) and CT (post-op) with electrodes implanted. YAEL supports either DICOM or NIfTI imaging formats.\n\n\n\nSome methods such as ANTs for CT-MR co-registration are developed in Python. We highly recommend that you run the following R command:\nravemanager::validate_python()\n#&gt; Initializing python environment: \n...\n#&gt;  ants: 0.5.3\nIf you see output ants: followed by a valid version number, that means ANTs is properly configured, otherwise run the following command to configure. RAVE will create an isolated Python environment that will not affect your current system.\nravemanager::configure_python()\nPlease make sure the computer has access to the internet.\n\n\n\nFreeSurfer is highly recommended if you want to reconstruct brain surface models. The program also comes with commonly used brain parcelation and sub-cortical segmentation methods. Please check their official website on how to download and configure. Make sure you also register and download a license file (it’s free):\n\nDownload page: https://surfer.nmr.mgh.harvard.edu/fswiki/DownloadAndInstall\nFree license application: https://surfer.nmr.mgh.harvard.edu/registration.html\n\nIf you are using Windows, please consider using docker https://hub.docker.com/r/freesurfer/freesurfer to run FreeSurfer reconstruction on your own. See (TBD) for how to bring your own FreeSurfer folder to YAEL."
  },
  {
    "objectID": "posts/electrode_localization/yael.html#step-1-imaging-preprocess",
    "href": "posts/electrode_localization/yael.html#step-1-imaging-preprocess",
    "title": "YAEL - Your Advanced Electrode Localizer",
    "section": "Step 1: Imaging Preprocess",
    "text": "Step 1: Imaging Preprocess\nThe imaging preprocess module in YAEL contains the following two parts. If you would like to substitute any part (or even the entire module) with your existing pipelines, see ‘Alternative Preprocess’ (TBD) below.\n\nT1 image preprocess\nCT-MR co-registration\n\nHere is a video tutorial using NIfTI T1 and CT as input:"
  },
  {
    "objectID": "posts/electrode_localization/yael.html#step-2-interactive-3d-electrode-localization",
    "href": "posts/electrode_localization/yael.html#step-2-interactive-3d-electrode-localization",
    "title": "YAEL - Your Advanced Electrode Localizer",
    "section": "Step 2: Interactive 3D electrode localization",
    "text": "Step 2: Interactive 3D electrode localization\nHere is an introductory video of using YAEL interactive 3D viewer for electrode localization.\n\nMore videos are available here:\n\n\n\n\n\nCredit: Sarah (Ivi) Fung"
  },
  {
    "objectID": "posts/customize_modules/python_module_01.html",
    "href": "posts/customize_modules/python_module_01.html",
    "title": "Create a Python Pipeline",
    "section": "",
    "text": "Please make sure you install RAVE and RStudio first. This tutorial needs Python to be configured for RAVE. Please make sure you run this one-time setup command if you haven’t done so ravemanager::configure_python()."
  },
  {
    "objectID": "posts/customize_modules/python_module_01.html#open-the-rave-pipelines-project",
    "href": "posts/customize_modules/python_module_01.html#open-the-rave-pipelines-project",
    "title": "Create a Python Pipeline",
    "section": "1.1 Open the “rave-pipelines” project",
    "text": "1.1 Open the “rave-pipelines” project\nIt is important that RStudio works at rave-pipelines project level. This can be verified by checking the up-right corner of the RStudio label. If the active project is not rave-pipelines, simply click on the project drop-down icon and choose “rave-pipelines” to activate."
  },
  {
    "objectID": "posts/customize_modules/python_module_01.html#testdebug-rave-modules",
    "href": "posts/customize_modules/python_module_01.html#testdebug-rave-modules",
    "title": "Create a Python Pipeline",
    "section": "1.2 Test/Debug RAVE modules",
    "text": "1.2 Test/Debug RAVE modules\nOpen project rave-pipelines in RStudio, type in R command\nravedash::debug_modules()\nA dashboard system will launch in the background, allowing interactive UI debugging.\nRAVE provides mechanisms to separate the code logistics and UI (user-interface) components. A comprehensive analysis should execute with or without user-interface. In the following context, we refer “pipeline” to the code/script part, where the end-users can run the code offline (without UI), and “UI” to the user-interface part. A RAVE module often consists of a non-interactive pipeline (code) and an interactive UI."
  },
  {
    "objectID": "posts/customize_modules/python_module_01.html#create-a-new-python-module",
    "href": "posts/customize_modules/python_module_01.html#create-a-new-python-module",
    "title": "Create a Python Pipeline",
    "section": "2.1 Create a new Python module",
    "text": "2.1 Create a new Python module\nOpen project rave-pipelines, type the following R command in the console:\nraveio::module_add(\n  module_id = \"fooof_module\", \n  module_label = \"Fooof\", \n  type = \"python\"\n)\nA folder named with module ID fooof_module is created under the modules/ folder. If we run the debug code ravedash::debug_modules(), an empty “Fooof” module is available at the side-bar. If we click on the module, only a built-in loading screen will be popped up, since we haven’t added anything to the module yet.\n\n\nIn RAVE, each module has a distinct module ID (fooof_module in this case) and a human friendly label name (Fooof). Please make sure the module ID is unique and does not collide with others. A good convention follows &lt;institute&gt;_&lt;lab_name&gt;_&lt;module_id&gt;, such as utmb_karaslab_freez, or upenn_ese25_fooof.\n\n\nOpen modules/fooof_module/ directory, and we will see the pipeline files. The following list includes the most important files:\n\nDESCRIPTION declares title, descriptions, and authorship of the module;\nmain.Rmd RAVE-markdown file, the entry point containing the important analysis scripts of the pipeline;\nsettings.yaml pipeline user inputs;\npy/ A folder containing shared Python functions that can be reused by main.Rmd;\nR/ A folder containing UI code and shared R functions that can be reused by main.Rmd."
  },
  {
    "objectID": "posts/customize_modules/python_module_01.html#main.rmd---the-entry-point",
    "href": "posts/customize_modules/python_module_01.html#main.rmd---the-entry-point",
    "title": "Create a Python Pipeline",
    "section": "2.2 main.Rmd - the entry point",
    "text": "2.2 main.Rmd - the entry point\n\n2.2.1 Anatomy of RAVE-markdown\nMarkdown is a type of markup language for creating formatted text using a plain-text editor. A RAVE-markdown document is a special file in markdown that allows RAVE to construct a pipeline from the code blocks.\nA typical RAVE-markdown file (an example is available here) starts with a key-value meta-data field specifying the title and styles of the document (possibly with other optional key-values). Please change the “title” field accordingly.\n\n\n\n\n---\ntitle: \"RAVE Pipeline Markdown Template\"\noutput:\n  html_document: default\n  pdf_document: default\n---\n\n\n\nA setup block immediately follows the meta field. This block provides tools to help the developers debug this markdown by preparing proper environments, loading the input settings to the memory, and injecting utility functions for the pipeline. Please do NOT edit nor remove this block.\n```{r setup, include = FALSE}\n# This code block sets up the engine environment\n# Please do not remove me\nraveio::pipeline_setup_rmd(\"fooof_module\")\nrpymat::ensure_rpymat()\n```\nAfter setting up the document, RAVE pipeline targets kick in. In RAVE-markdown files, pipeline “target” is simply a type of code block with a set of special options, for example,\n```{python calculate_correlation, use_rave = TRUE, deps = c(\"input_data\"), export = \"correlation\", cue = \"thorough\"}\n# Load numpy\nimport numpy as np\n\n# Calculate correlation\ncorrelation = np.corrcoef(input_data['x'], input_data['y'])\nprint(correlation)\n```\nA target always starts with ```{...}, three back ticks followed by a pair of curly brackets. The first argument inside should be the programming language (e.g. python in this example, or r for R language), followed by the block ID, and a punctuation mark ,. The comment must be all letters and digits. No space is allowed. The target options should be placed after the first ,. Each option is a key=value pair. Multiple options should be separated by ,. Their order does not matter.\n\n```{{python calculate_correlation, ... suggests that this block is written in Python, and its ID is generate_input_data.\n\nThe block ID must be unique and in “snake” format, no space nor special characters are allowed. The ID helps the compiler distinguish the code blocks and may serve as a descriptive comment of the target block. RAVE will automatically break the underscores and convert the comment to sentence case. For example, the above block ID will be interpreted as “Calculate correlation”.\n\nuse_rave=TRUE: (mandatory, logical TRUE or FALSE) if TRUE, this code block will be interpreted as a pipeline target, otherwise the block will be treated as a debugging/visualization block and will be ignored when compiling the RAVE-markdown.\nexport=\"input_data\": (mandatory, string) the pipeline target is expected to generate an intermediate variable called input_data within the block. This variable must be created during evaluation. Notice all other local variables will be discarded at the end of evaluation.\ndeps=c(\"input_data\", ...): (optional, vector of strings) a collection of previous targets whose code should execute prior to evaluating the current block. The the example, calculating \"correlation\" requires RAVE to check and run a previous target input_data first, and this behavior can be expected by setting deps=c(\"input_data\").\ncue=\"thorough\": controls the cache. RAVE tries to cache the values of the pipeline targets during evaluation. For the target objects that have been cached, their corresponding script might not need to be re-evaluated if all the depending values remain unchanged. For example, if the value of input x and y remain unchanged, then their correlation does not need to be re-calculated. RAVE checks and tries to reuse the cached targets with option \"thorough\". Other choices are \"always\" (ignore cache and always run the code) and \"never\" (if cache exists, never update).\n\nAt the end of the document, there are two special blocks that are not pipeline targets. The first block helps RAVE extract the code blocks and interpret main.Rmd into a low-level make file, which will be analyzed and loaded by RAVE. (Similar to compiling languages). Please do NOT edit nor remove this block.\n```{r build, echo=FALSE, results='hide'}\n# Please do not edit me\nbuild_pipeline(make_file = \"make-fooof_module.R\")\n```\nThe last block analyzes and visualizes the pipeline target dependency graph.\n```{r visualize, echo=FALSE}\n# Fixed usage, show pipeline graph\ntry({\n  asNamespace(\"ravepipeline\")$pipeline_dependency_graph(\n    pipeline_path = \".\", glimpse = TRUE)\n}, silent = TRUE)\n```\n\n\n\nIn the full example, target “correlation” depends on “input_data”, hence there is a direct arrow pointing from input_data to correlation. RAVE will use the dependency graph to decide which target code to run when evaluating/updating the pipelines.\n\n\n\n\n2.2.2 Compile and run a RAVE pipeline\nPlease copy the following toy example RAVE-markdown script to your own main.Rmd. This example consists of two targets:\n\nrandomly generate two sequences of data samples; store them into a variable input_data\ncompute the correlation of these two samples; store them into correlation\n\nTo compile the RAVE-markdown file, click on the knit button right above the RStudio editor. RAVE will turn main.Rmd into an HTML website.\n\n\n\nThe “knit” button. In some versions of RStudio, this buton might be replaced by a “Render” button. These two are the same: they reshape the RAVE-markdown document into low-level RAVE pipeline files\n\n\nOnce a RAVE-markdown is compiled, the pipeline can be loaded via the raveio package:\npipeline &lt;- raveio::pipeline(\n  pipeline_name = \"fooof_module\",\n  paths = file.path(rstudioapi::getActiveProject(), \"modules\"), \n  temporary = TRUE\n)\nUsers may use variable pipeline to inspect, execute, and debug the pipeline:\n# Inspect runnable pipeline targets\n\npipeline$target_table\n#&gt;           Names           Description\n#&gt; 1 settings_path   Check settings file\n#&gt; 2      settings         Load settings\n#&gt; ...\n#&gt; 6    input_data   Generate input data\n#&gt; 7   correlation Calculate correlation\n\n# Execute the pipeline and obtain the `correlation`. RAVE analyzes the\n# dependency graph and only execute the code needed to get the results\n\npipeline$run(\"correlation\")\n#&gt; ▶ dispatched target input_data\n#&gt; ● completed target input_data\n#&gt; ▶ dispatched target correlation\n#&gt; ● completed target correlation\n#&gt; ▶ ended pipeline\n#&gt; Unserializing [correlation] using Python module [fooof_module]\n#&gt; array([[ 1.        , -0.00115628],\n#&gt;        [-0.00115628,  1.        ]])\nThe results can be read via R command pipeline$read:\ncorrelation &lt;- pipeline$read(\"correlation\")\nprint(correlation)\n#&gt; Unserializing [correlation] using Python module [fooof_module]\n#&gt; array([[ 1.        , -0.00115628],\n#&gt;        [-0.00115628,  1.        ]])\n\n# convert to R object\nrpymat::py_to_r(correlation)\n#&gt;              [,1]         [,2]\n#&gt; [1,]  1.000000000 -0.001156276\n#&gt; [2,] -0.001156276  1.000000000\nThe intermediate target objects can also be obtained via pipeline$read. Since input_data is needed to generate correlation, we can query the input_data:\nrpymat::py_to_r(pipeline$read(\"input_data\"))\n#&gt; Unserializing [input_data] using Python module [fooof_module]\n#&gt; $x\n#&gt;   [1]  0.295724397  0.564604875  0.148322479 -0.601025450\n#&gt;   [5] -1.231688320  0.806052141 -0.530310763 -1.005618898\n#&gt;   ...\n#&gt; $y\n#&gt;   [1]  0.419751857 -0.049027138  0.370873782 -0.447514917\n#&gt;   [5]  1.072258166  1.449203206  0.702124070  0.504838715\n#&gt;   ..."
  },
  {
    "objectID": "posts/customize_modules/python_module_01.html#settings.yaml---user-inputs",
    "href": "posts/customize_modules/python_module_01.html#settings.yaml---user-inputs",
    "title": "Create a Python Pipeline",
    "section": "2.3 settings.yaml - user inputs",
    "text": "2.3 settings.yaml - user inputs\nRAVE analysis pipelines allow users to set their own inputs, such as project and subject from which the data should be loaded, frequency ranges where analyses should be applied, or t-value thresholds that select significant channels, etc. These configurable settings are stored at file settings.yaml, a human-readable data serialization “YAML” file.\nDuring the code evaluation, RAVE will read in all the key-value pairs from settings.yaml and make them available to the targets in both R and Python environments. The key will be the variable name and the value will be the variable value.\nTo understand how RAVE handles the user input files, let’s use this example that contains two user inputs: sample_size and random_generator. In the previous “main.Rmd”, the number of random variables \"10\" and random number generator are hard-coded. We hope that the sample size can be controlled by users via input sample_size, and the generator function be controlled by random_generator. Here is the implementation (the full version is available here):\n\n&lt;!-- Begin: pipeline code --&gt;\n\nGenerate some random data\n\n```{python generate_input_data, use_rave = TRUE, deps = c(\"sample_size\", \"random_generator\"), export = \"input_data\"}\nimport numpy as np\n\n# sample size as integer\nsample_s = int(sample_size)\n\nif sample_size &lt;= 0:\n  raise Exception(f\"Sample size should be positive\")\n\n# get random number generator\nif random_generator == \"randn\":\n  generator = np.random.randn\nelif random_generator == \"randint\":\n  generator = np.random.randint\nelif random_generator == \"rand\":\n  generator = np.random.rand\nelse:\n  raise Exception(f\"Unknown random number generator { generator_name }\")\n\ninput_data = {\n  'x' : generator(sample_size),\n  'y' : generator(sample_size)\n}\n```\n\nCalculate the correlation coefficients\n\n```{python calculate_correlation, use_rave = TRUE, deps = \"input_data\", export = \"correlation\"}\nimport numpy as np\ncorrelation = np.corrcoef(input_data['x'], input_data['y'])\nprint(correlation)\n```\n\n&lt;!-- End: pipeline code --&gt;\nPipeline target input_data now depends on sample_size and random_generator. When evaluating input_data, these two inputs will be made available. Here is the dependency graph:\n\n\n\nTo obtain the correlation, RAVE first obtain the settings.yaml file, read in the content and store the values as settings variable. Then the inputs will be dispatched as separate targets before being being fed into input_data. The results of input_data are then used to calculate correlation\n\n\nIf we compile and execute the pipeline, we see:\npipeline$run(\"correlation\")\n#&gt; ▶ dispatched target settings_path                        &lt;- get settings path\n#&gt; ● completed target settings_path [0 seconds, 43 bytes]\n#&gt; ▶ dispatched target settings                             &lt;- read in settings.yaml\n#&gt; ● completed target settings [0.001 seconds, 118 bytes]\n#&gt; ▶ dispatched target sample_size                          &lt;- dispatch sample_size\n#&gt; ▶ dispatched target random_generator                     &lt;- dispatch random_generator in parallel\n#&gt; ● completed target sample_size [0 seconds, 49 bytes]\n#&gt; ● completed target random_generator [0 seconds, 58 bytes]\n#&gt; Serializing [input_data] using Python module [fooof_module]\n#&gt; shared/user/input_data                                   &lt;- try to find cache\n#&gt; ▶ dispatched target input_data                           &lt;- no cache found, evaluating input_data\n#&gt; ● completed target input_data [0.686 seconds, 115 bytes]\n#&gt; Serializing [correlation] using Python module [fooof_module]\n#&gt; shared/user/correlation                                  &lt;- try to find cache\n#&gt; ▶ dispatched target correlation                          &lt;- no cache found, calculating correlation\n#&gt; ● completed target correlation [0 seconds, 115 bytes]\n#&gt; ▶ ended pipeline [0.886 seconds]\n#&gt; Unserializing [correlation] using Python module [fooof_module]\n#&gt; array([[ 1.        , -0.04835359],                       &lt;- print final results\n#&gt;        [-0.04835359,  1.        ]])\n\n2.3.1 Programmatically set pipeline inputs\n We will discuss advanced usages in the future. This section only covers a basic usage. \nPipeline settings can be read/written programmatically in R:\npipeline &lt;- raveio::pipeline(\n  pipeline_name = \"fooof_module\",\n  paths = file.path(rstudioapi::getActiveProject(), \"modules\"), \n  temporary = TRUE\n)\n\n# get settings\npipeline$get_settings()\n#&gt; $random_generator\n#&gt; [1] \"randn\"\n#&gt; \n#&gt; $sample_size\n#&gt; [1] 100\n\n# set input(s)\npipeline$set_settings(\n  sample_size = 200\n)\n\n# get a specific setting\npipeline$get_settings(\"sample_size\")\n#&gt; [1] 200"
  },
  {
    "objectID": "posts/customize_modules/python_module_01.html#scopeenclosure-of-target-scripts",
    "href": "posts/customize_modules/python_module_01.html#scopeenclosure-of-target-scripts",
    "title": "Create a Python Pipeline",
    "section": "2.4 Scope/enclosure of target scripts",
    "text": "2.4 Scope/enclosure of target scripts\nA RAVE pipeline target consists of inputs, an output, and script. To make an analysis pipeline reproducible, there are two rules:\n\nFor any target “A”, the inputs should be sufficient to generate its outputs\nFor any other target “B”, the only reliable object from “A” is its output (or “export”). All the intermediate/temporary variables will be discarded once the life-cycle of “A” ends.\n\nTo understand the scope/enclosure of the RAVE pipeline targets, let’s take a look at a real-world example. Imagine drinking a bottle of water. We know that the water comes from some reservoir, and it was cleaned by some factory. However, the chemicals used by water cleaning facilities are unavailable to most ordinary people. If we abstract this example into a RAVE target, then the components are:\n\nInputs: water from reservoir\nOutput: a bottle of clean water\nScript: water cleaning factory\n\nTemporary local variables: chemicals used to clean the water\n\n\nFor us who only care about drinking water, the output “a bottle of clean water” is enough, and chemicals used to clean the water is inaccessible.\nNow let’s make such list for the pipeline targets in Section 2.3, the components of target input_data are:\n\nInputs: sample_size, random_generator (read-only)\nOutput: input_data\nScript: code to generate input_data\n\nTemporary local variables: np, sample_size, generator\n\n\nFor all other targets (e.g. target correlation), only the input_data is made available, all the intermediate variables, including any changes made to these variables (e.g. sample_size) will be hidden/reverted.\nOne might argue that shared functions/modules such as numpy are read-only. They should be available to all targets. It would be stupid to import the same module in every target block. RAVE has a solution to this problem. We will discuss about reusing scripts to avoid “repeating ourselves” in the following section."
  },
  {
    "objectID": "posts/customize_modules/python_module_01.html#shared-scripts---do-not-repeat-yourself",
    "href": "posts/customize_modules/python_module_01.html#shared-scripts---do-not-repeat-yourself",
    "title": "Create a Python Pipeline",
    "section": "2.5 Shared scripts - Do not repeat yourself",
    "text": "2.5 Shared scripts - Do not repeat yourself\nIn Section 2.3, both targets share the same line:\nimport numpy as np\nThis could be annoying: do we need to repeat ourselves every time? Luckily RAVE offers a mechanism to avoid repeating ourselves for both R and Python scripts. We mainly focus on the Python part in this tutorial.\n\n2.5.1 py/ share Python functions/modules across targets\nOpen modules/fooof_module/py, we will see the following files:\n\nfooof_module/ a customized python module folder to include shared functions\nknitr-common.py entry-point; the script will be evaluated at the beginning of each pipeline target block.\nrave-py-submodule.yaml python requirement, which helps RAVE install 3rd-party “pip” or “conda” packages.\n\nLet’s implement a very simple logging feature using the Python loguru package. Notice this is not the most efficient implementation because we want to demonstrate the full functionality.\nStep 1: Install loguru package for development use (one-time setup)\nRun R command\nrpymat::add_packages(\"loguru\")\nStep 2: add loguru to rave-py-submodule.yaml so the RAVE will automatically install the package when users download the module.\nname: fooof_module\ndependencies:\n- pip:\n  - numpy\n- conda:\n  - loguru\nStep 3: create a logger.py at modules/fooof_module/py/fooof_module/, copy-paste the following script. Again, we don’t have to do this in the actual development, the goal is to demonstrate how a custom function can be shared across the targets.\nfrom loguru import logger\n\ndef log_info(*args, **kwargs):\n    logger.info(*args, **kwargs)\nStep 4: Create shared initialization script. Open modules/fooof_module/py/knitr-common.py, append these lines. For each Python target, the module numpy will be available as np, and custom function log_info will be available too.\nimport numpy as np\nfrom fooof_module.logger import log_info\nIf we take a glimpse of the compiled target file, we will see that these two lines are added on top.\nStep 5: Go to main.Rmd, remove the numpy import line. Now we can use np and log_info without explicitly importing these two variables in every block. See this final result\nStep 6: Compile (knit) main.Rmd\nWe can test-run the pipeline:\npipeline &lt;- raveio::pipeline(\n  pipeline_name = \"fooof_module\",\n  paths = file.path(rstudioapi::getActiveProject(), \"modules\"), \n  temporary = TRUE\n)\n\npipeline$run(\"correlation\")\n#&gt; ... (output omitted)\n#&gt; 2025-02-28 17:36:03.792 | INFO     | fooof_module.logger:log_info:4 - Generating sample data with function np.random.randn and sample size 200\n#&gt; ... (output omitted)\n#&gt; 2025-02-28 17:36:03.803 | INFO     | fooof_module.logger:log_info:4 - Calculating correlation: \n#&gt;  [[ 1.         -0.00115628]\n#&gt;  [-0.00115628  1.        ]]\n#&gt; ... (output omitted)\nFrom the output we can see that the log_info is working properly.\nThe full git change log is here:\n\nmodules/fooof_module/py/rave-py-submodule.yaml\nmodules/fooof_module/py/knitr-common.py\nmodules/fooof_module/py/fooof_module/logger.py"
  },
  {
    "objectID": "posts/customize_modules/python_module_01.html#part-3-implement-fooof-pipeline",
    "href": "posts/customize_modules/python_module_01.html#part-3-implement-fooof-pipeline",
    "title": "Create a Python Pipeline",
    "section": "Part 3: Implement fooof pipeline",
    "text": "Part 3: Implement fooof pipeline\n(TBD)"
  },
  {
    "objectID": "posts/3dviewer/viewer201.html",
    "href": "posts/3dviewer/viewer201.html",
    "title": "Customize 3D Viewer Color Palette",
    "section": "",
    "text": "This post contains interactive components (experimental) that allows you to execute RAVE code from the web browsers. If you would like to try this feature and customize/play with the code, please be patient. It might take a while for the browser to finish setting up (depending on your network speed). Once the script is ready, you will see “WEBR STATUS: 🟢 Ready!” in the above banner.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "posts/3dviewer/viewer201.html#prerequisites",
    "href": "posts/3dviewer/viewer201.html#prerequisites",
    "title": "Customize 3D Viewer Color Palette",
    "section": "Prerequisites",
    "text": "Prerequisites\nThis post assumes that you have already imported subject’s imaging data to RAVE and finished the electrode localization."
  },
  {
    "objectID": "posts/3dviewer/viewer201.html#simple-3d-viewer",
    "href": "posts/3dviewer/viewer201.html#simple-3d-viewer",
    "title": "Customize 3D Viewer Color Palette",
    "section": "1. Simple 3D viewer",
    "text": "1. Simple 3D viewer\nLibrary raveio provides simple high-level function rave_brain to load 3D brain object.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nUse brain$plot(&lt;your arguments...&gt;) to show the viewer:\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nPreview of the result. See below if you want to play with the 3D viewer interactively"
  },
  {
    "objectID": "posts/3dviewer/viewer201.html#render-electrodes-with-values",
    "href": "posts/3dviewer/viewer201.html#render-electrodes-with-values",
    "title": "Customize 3D Viewer Color Palette",
    "section": "2. Render electrodes with values",
    "text": "2. Render electrodes with values\nbrain$set_electrode_values(table_or_path) allows users to load a data table and render electrodes with colors. Users can create a csv table using Excel or their favorite programming languages, as long as the table follows the following format (See example data table):\n\n\n\nSubject\nElectrode\nvarname*\n\n\n\n\nDemoSubject\n1\n0.25\n\n\nDemoSubject\n14\n-0.4\n\n\n…\n…\n…\n\n\n\nHere is the explanation of the columns (case-sensitive):\n\nSubject is the subject code\nElectrode is the electrode channel number (integer)\nvarname* can be almost anything (give it a meaningful name, for e.g., Power, Cluster, …) that you would like to show, and the values can be either numeric or categorical\n\nThe variable name is recommended to only contain letters and digits. For example, BetaBandPower seems to be a good idea, while names like 75-150 Hz should be avoided\nThe variable values must not be numerical if the intent is categorical. For example cluster values such as 1, 2, 3, … should be avoided and users should use Cluster 1, Cluster 2, Cluster 3, …, or A, B, C, … instead\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nLeft: continuous values with symmetric value range. The color palette transition from blue to white to red (default); Right: Categorical data with default color palette"
  },
  {
    "objectID": "posts/3dviewer/viewer201.html#render-options",
    "href": "posts/3dviewer/viewer201.html#render-options",
    "title": "Customize 3D Viewer Color Palette",
    "section": "3. Render options",
    "text": "3. Render options\nbrain$plot allows users to provide render options to change the following components:\n\nColor palette\nDefault value ranges (for continuous data)\nControl panels\n\nHere’s a full example:\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "posts/3dviewer/viewer201.html#key-documentations",
    "href": "posts/3dviewer/viewer201.html#key-documentations",
    "title": "Customize 3D Viewer Color Palette",
    "section": "Key Documentations",
    "text": "Key Documentations\n\nFunction raveio::rave_brain\n\nLoad ‘FreeSurfer’ or ‘AFNI/SUMA’ brain from ‘RAVE’\n\nrave_brain\n\nDescription\n\n\nCreate 3D visualization of the brain and visualize with modern web browsers\n\n\nUsage\n\nrave_brain(\n  subject,\n  surfaces = \"pial\",\n  overlays = \"aparc.a2009s+aseg\",\n  annotations = \"label/aparc.a2009s\",\n  ...,\n  usetemplateifmissing = FALSE,\n  include_electrodes = TRUE\n)\n\n\nArguments\n\n\n\n\nsubject\n\n\n\ncharacter, list, or RAVESubject instance; for list or other objects, make sure subject$subject_id is a valid ‘RAVE’ subject ‘ID’\n\n\n\n\n\nsurfaces\n\n\n\none or more brain surface types from “pial”, “white”, “smoothwm”, “pial-outer-smoothed”, etc.; check freesurfer_brain2\n\n\n\n\n\noverlays\n\n\n\nvolumes to overlay; default is ‘aparc.a2009s+aseg’\n\n\n\n\n\nannotations\n\n\n\nsurface annotation or curvature data to load; default is ‘label/aparc.a2009s’, referring to the ’*h.aparc.a2009s.annot’ under the label folder.\n\n\n\n\n\n…\n\n\n\nignored, reserved for legacy code\n\n\n\n\n\nusetemplateifmissing\n\n\n\nwhether to use template brain when the subject brain files are missing. If set to true, then a template (usually ‘N27’) brain will be displayed as an alternative solution, and electrodes will be rendered according to their ‘MNI305’ coordinates, or ‘VertexNumber’ if given.\n\n\n\n\n\ninclude_electrodes\n\n\n\nwhether to include electrode in the model; default is true\n\n\n\n\n\nValue\n\n\nA ‘threeBrain’ instance if brain is found or usetemplateifmissing is set to true; otherwise returns NULL\n\n\nExamples\n\n\n\n# Please make sure DemoSubject is correctly installed\n# The subject is ~1GB from Github\n\nif(interactive()){\n  brain &lt;- rave_brain(\"demo/DemoSubject\")\n\n  if( !is.null(brain) ) { brain$plot() }\n\n}"
  },
  {
    "objectID": "blogs.html",
    "href": "blogs.html",
    "title": "Documentations & Examples",
    "section": "",
    "text": "Title\n\n\nDescription\n\n\nReading Time\n\n\n\n\n\n\nInstallation Guide\n\n\nTry RAVE today! \n\n\n2 min\n\n\n\n\nUpdating and Upgrading Guide\n\n\nUpdate RAVE today! \n\n\n2 min\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "blogs.html#installation",
    "href": "blogs.html#installation",
    "title": "Documentations & Examples",
    "section": "",
    "text": "Title\n\n\nDescription\n\n\nReading Time\n\n\n\n\n\n\nInstallation Guide\n\n\nTry RAVE today! \n\n\n2 min\n\n\n\n\nUpdating and Upgrading Guide\n\n\nUpdate RAVE today! \n\n\n2 min\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "blogs.html#examples",
    "href": "blogs.html#examples",
    "title": "Documentations & Examples",
    "section": "Examples",
    "text": "Examples\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\nRAVE Pipeline Markdown Template\n\n\n17 min\n\n\n\nModule\n\n\nPython\n\n\n\nTry RAVE today!\n\n\n\nFeb 27, 2025\n\n\n\n\n\n\n\n\n\n\n\n\nDrag & Drop Objects to 3D Viewer\n\n\n5 min\n\n\n\n3D Viewer\n\n\nInteractive Module\n\n\n\nThis post demonstrates how to use the drag & drop feature using 3D viewer\n\n\n\nJan 27, 2025\n\n\n\n\n\n\n\n\n\n\n\n\nYAEL - Your Advanced Electrode Localizer\n\n\n4 min\n\n\n\nElectrode Localization\n\n\nFeatured\n\n\n\nCreate basic 3D viewer and render with colors\n\n\n\nOct 6, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nBasic Signal Filters\n\n\n2 min\n\n\n\nSignal Processing\n\n\nInteractive Module\n\n\n\nHigh-level functions to design and apply filters in RAVE\n\n\n\nSep 18, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nCustomize 3D Viewer Color Palette\n\n\n6 min\n\n\n\n3D Viewer\n\n\nInteractive Module\n\n\n\nCreate basic 3D viewer and render with colors\n\n\n\nSep 16, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nMake a group brain\n\n\n6 min\n\n\n\n3D Viewer\n\n\n\nCreate a group-level 3D viewer\n\n\n\nSep 16, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html#rave-reproducible-analysis-visualization-of-ieeg",
    "href": "index.html#rave-reproducible-analysis-visualization-of-ieeg",
    "title": "RAVE",
    "section": "RAVE: Reproducible Analysis & Visualization of iEEG ",
    "text": "RAVE: Reproducible Analysis & Visualization of iEEG \nRAVE is free and open-source software for the analysis of intracranial electroencephalogram (iEEG) data, including data collected using strips and grids (electrocorticography, ECoG) and depth electrodes (stereotactic EEG). A sister package to RAVE is the YAEL electrode localization toolkit.\n  RAVE is easy to use and creates publication-ready figures with absolutely no programming. RAVE can import standard data formats, including Matlab and EDF, and is compatible with BIDS-iEEG. It runs on laptops, lab servers, or in the cloud. Since all user interactions take place through a web browser, the user experience is identical on Mac, Windows and Linux. Data from RAVE can be exported for analysis using other software (click here for a list of iEEG analysis tools). Conversely, outside results can be imported and visualized using RAVE’s visualization engine. RAVE provides templates to make it easy to create GUI-based analyses using the streamlined application programming interface.\nJoin our growing RAVE-iEEG community on Slack . E-mail slack@rave.wiki for an invitation.\nRAVE has been developed since 2017 with funding provided by NIH R01MH133717 , U01NS113339, and 1R24MH117529. If you use RAVE for a publication, please cite:\n\nMagnotti JF, Wang Z, Beauchamp MS. RAVE: comprehensive open-source software for reproducible analysis and visualization of intracranial EEG data. NeuroImage (2020) 223:117341. [Click here for the journal full text] [Click here for the PDF] [Click here for the preprint].\n\nIf you use YAEL for electrode localization, please cite:\n\nWang Z, Magnotti JF, Zhang X, Beauchamp MS. YAEL: Your Advanced Electrode Localizer. Eneuro. 2023 Oct 1;10(10). [Click here for the journal full text] [Click here for the PDF] [Click here for the preprint]."
  },
  {
    "objectID": "index.html#installation",
    "href": "index.html#installation",
    "title": "RAVE",
    "section": "Installation",
    "text": "Installation\nPlease check our full installation guide here."
  },
  {
    "objectID": "index.html#publications",
    "href": "index.html#publications",
    "title": "RAVE",
    "section": "Publications",
    "text": "Publications\nSend us your (p)reprint and we will add it to the list!\n\n\n\n\n\n\n\n\n\n\n\nRAVE: Comprehensive open-source software for reproducible analysis and visualization of intracranial EEG data\nJohn F. Magnotti, Zhengjia Wang, and Michael S. Beauchamp\n\nNeuroImage\n, \nDec 2020\n\n\n\n\nDOI: 10.1016/j.neuroimage.2020.117341\n\n\n\n\n\n\n\n\n\n\n\nYAEL: Your Advanced Electrode Localizer\nZhengjia Wang, John F. Magnotti, Xiang Zhang, and Michael S. Beauchamp\n\neNeuro\n, \nOct 2023\n\n\n\n\nDOI: 10.1523/ENEURO.0328-23.2023\n\n\n\n\n\n\n\n\n\n\n\nBeta activity in human anterior cingulate cortex mediates reward biases\nJiayang Xiao, Joshua A. Adkinson, John Myers, Anusha B. Allawala, Raissa K. Mathura, Victoria Pirtle, Ricardo Najera, Nicole R. Provenza, Eleonora Bartoli, Andrew J. Watrous, Denise Oswalt, Ron Gadot, Adrish Anand, Ben Shofty, Sanjay J. Mathew, Wayne K. Goodman, Nader Pouratian, Xaq Pitkow, Kelly R. Bijanki, Benjamin Hayden, and Sameer A. Sheth\n\nNature Communications\n, \nJuly 2024\n\n\n\n\nDOI: 10.1038/s41467-024-49600-7\n\n\n\n\n\n\n\n\n\n\n\nBayesian Image-on-Scalar Regression with a Spatial Global-Local Spike-and-Slab Prior\nZijian Zeng, Meng Li, and Marina Vannucci \n\nBayesian Analysis\n, \nMar 2024\n\n\n\n\nDOI: 10.1016/j.brs.2022.03.002\n\n\n\n\n\n\n\n\n\n\n\nIntracranial stimulation and EEG feature analysis reveal affective salience network specialization\nBrian A. Metzger, Prathik Kalva, Madaline M. Mocchi, Brian Cui, and Joshua A. Adkinson, Zhengjia Wang, Raissa Mathura, Kourtney Kanja, Jay Gavvala, Vaishnav Krishnan, Lu Lin, Atul Maheshwari, Ben Shofty, John F. Magnotti, Jon T. Willie, Sameer A. Sheth, Kelly R. Bijanki\n\nBrain: A Journal of Neurology\n, \nOct 2023\n\n\n\n\nDOI: 10.1093/brain/awad200\n\n\n\n\n\n\n\n\n\n\n\nFunctional group bridge for simultaneous regression and support estimation\nZhengjia Wang, John Magnotti, Michael S. Beauchamp, and Meng Li\n\nBiometrics\n, \nJun 2023\n\n\n\n\nDOI: 10.1111/biom.13684\n\n\n\n\n\n\n\n\n\n\n\nImaging versus electrographic connectivity in human mood-related fronto-temporal networks\nJoshua A. Adkinson, Evangelia Tsolaki, Sameer A. Sheth, Brian A. Metzger, and Meghan E. Robinson, Denise Oswalt, Cameron C. McIntyre, Raissa K. Mathura, Allison C. Waters, Anusha B. Allawala, Angela M. Noecker, Mahsa Malekmohammadi, Kevin Chiu, Richard Mustakos, Wayne Goodman, David Borton, Nader Pouratian, Kelly R. Bijanki\n\nBrain Stimulation\n, \nMay 2022\n\n\n\n\nDOI: 10.1016/j.brs.2022.03.002\n\n\n\n\n\n\n\n\n\n\n\nResponses to Visual Speech in Human Posterior Superior Temporal Gyrus Examined with iEEG Deconvolution\nBrian A. Metzger, John F. Magnotti, Zhengjia Wang, Elizabeth Nesbitt, and Patrick J. Karas, Daniel Yoshor, Michael S. Beauchamp \n\nThe Journal of Neuroscience: The Official Journal of the Society for Neuroscience\n, \nSep 2020\n\n\n\n\nDOI: 10.1523/JNEUROSCI.0279-20.2020\n\n\n\n\n\n\n\n\n\n\n\nThe visual speech head start improves perception and reduces superior temporal cortex responses to auditory speech\n Patrick J Karas, John F Magnotti, Brian A Metzger, Lin L Zhu, and Kristen B Smith, Daniel Yoshor, Michael S Beauchamp \n\neLife\n, \nAug 2019\n\n\n\n\nDOI: 10.7554/eLife.48116"
  },
  {
    "objectID": "posts/3dviewer/viewer301.html",
    "href": "posts/3dviewer/viewer301.html",
    "title": "Make a group brain",
    "section": "",
    "text": "Here is an interactive demo showing two subjects mapped to a template MNI152 brain."
  },
  {
    "objectID": "posts/3dviewer/viewer301.html#demo-make-group-level-visualization-on-a-template-brain",
    "href": "posts/3dviewer/viewer301.html#demo-make-group-level-visualization-on-a-template-brain",
    "title": "Make a group brain",
    "section": "",
    "text": "Here is an interactive demo showing two subjects mapped to a template MNI152 brain."
  },
  {
    "objectID": "posts/3dviewer/viewer301.html#create-template-brain",
    "href": "posts/3dviewer/viewer301.html#create-template-brain",
    "title": "Make a group brain",
    "section": "1. Create template brain",
    "text": "1. Create template brain\nFunction threeBrain::merge_brain provides high-level function to load individual subjects’ brain on a given template. See the following example:\nb1 &lt;- raveio::rave_brain(\"YAEL/PAV037\")\nb2 &lt;- raveio::rave_brain(\"YAEL/PAV038\")\n\ntemplate &lt;- threeBrain::merge_brain(b1, b2)\nJust like individual RAVE brain object, template also has method template$set_electrode_values to set electrode values and template$plot to visualize the group brain\ncsv_path &lt;- \"path/to/your/electrode_value.csv\"\ntemplate$set_electrode_values(csv_path)\n\ntemplate$plot()\nAlternatively, users can set electrode values for each individual subject\nb1$set_electrode_values(table1)\nb2$set_electrode_values(table2)\n..."
  },
  {
    "objectID": "posts/3dviewer/viewer301.html#choose-a-proper-template",
    "href": "posts/3dviewer/viewer301.html#choose-a-proper-template",
    "title": "Make a group brain",
    "section": "2. Choose a proper template",
    "text": "2. Choose a proper template\nThe default template is N27 Collin’s brain. RAVE offers other built-in templates that can be queried via function threeBrain::available_templates(). The following code downloads a MNI152 brain:\ntemplate_subject &lt;- \"cvs_avg35_inMNI152\"\ntemplate_root &lt;- threeBrain::default_template_directory()\nif(!dir.exists(file.path(template_root, template_subject))) {\n  threeBrain::download_template_subject(template_subject)\n}\nNow you can use this template\ntemplate &lt;- threeBrain::merge_brain(\n  b1, b2, \n  template_subject = template_subject\n)\ntemplate$plot()"
  },
  {
    "objectID": "posts/3dviewer/viewer301.html#a-full-example-with-customized-render-options",
    "href": "posts/3dviewer/viewer301.html#a-full-example-with-customized-render-options",
    "title": "Make a group brain",
    "section": "3. A full example with customized render options",
    "text": "3. A full example with customized render options\n# Using MNI152 template\ntemplate_subject &lt;- \"cvs_avg35_inMNI152\"\ntemplate_root &lt;- threeBrain::default_template_directory()\nif(!dir.exists(file.path(template_root, template_subject))) {\n  threeBrain::download_template_subject(template_subject)\n}\n\n# Load subject brain\nb1 &lt;- raveio::rave_brain(\"YAEL/PAV037\")\nb2 &lt;- raveio::rave_brain(\"YAEL/PAV038\")\n\n# create template brain\ntemplate &lt;- threeBrain::merge_brain(\n  b1, b2, \n  template_subject = template_subject\n)\n\n# set electrode values\nb1$set_electrode_values()\nb2$set_electrode_values()\n\n# plot with options\ntemplate$plot()\n\n\n\nThis is a screenshot of the output. Please scroll to the top to play with the 3D viewer demo"
  },
  {
    "objectID": "posts/3dviewer/viewer301.html#key-documentations",
    "href": "posts/3dviewer/viewer301.html#key-documentations",
    "title": "Make a group brain",
    "section": "Key Documentations",
    "text": "Key Documentations\n\nFunction merge_brain\n\nCreate Multi-subject Template\n\nmerge_brain\n\nDescription\n\n\nCreate Multi-subject Template\n\n\nUsage\n\nmerge_brain(\n  ...,\n  .list = NULL,\n  template_surface_types = NULL,\n  template_subject = unname(getOption(\"threeBrain.template_subject\", \"N27\")),\n  template_dir = default_template_directory()\n)\n\n\nArguments\n\n\n\n\n…, .list\n\n\n\nBrain2 objects\n\n\n\n\n\ntemplate_surface_types\n\n\n\nwhich template surface types to load, default is auto-guess\n\n\n\n\n\ntemplate_subject\n\n\n\ncharacter, subject code to be treated as template, default is ‘N27’\n\n\n\n\n\ntemplate_dir\n\n\n\nthe parent directory where template subject is stored in\n\n\n\n\n\nAuthor(s)\n\n\nZhengjia Wang\n\n\n\nFunction download_template_subject\n\nDownload and Manage Template Subjects\n\ntemplate_subject\n\nDescription\n\n\nDownload and Manage Template Subjects\n\n\nUsage\n\ndownload_template_subject(\n  subject_code = \"N27\",\n  url,\n  template_dir = default_template_directory()\n)\n\ndownload_N27(make_default = FALSE, ...)\n\nset_default_template(\n  subject_code,\n  view = TRUE,\n  template_dir = default_template_directory()\n)\n\nthreebrain_finalize_installation(\n  upgrade = c(\"ask\", \"always\", \"never\", \"data-only\", \"config-only\"),\n  async = TRUE\n)\n\navailable_templates()\n\n\nArguments\n\n\n\n\nsubject_code\n\n\n\ncharacter with only letters and numbers (Important); default is ‘N27’\n\n\n\n\n\nurl\n\n\n\nzip file address; must be specified if subject_code is not from the followings: ‘bert’, ‘cvs_avg35’, ‘cvs_avg35_inMNI152’, ‘fsaverage’, ‘fsaverage_sym’, or ‘N27’\n\n\n\n\n\ntemplate_dir\n\n\n\nparent directory where subject’s ‘FreeSurfer’ folder should be stored\n\n\n\n\n\nmake_default\n\n\n\nlogical, whether to make ‘N27’ default subject\n\n\n\n\n\n…\n\n\n\nmore to pass to download_template_subject\n\n\n\n\n\nview\n\n\n\nwhether to view the subject\n\n\n\n\n\nupgrade\n\n\n\nwhether to check and download ‘N27’ brain interactively. Choices are ‘ask’, ‘always’, and ‘never’\n\n\n\n\n\nasync\n\n\n\nwhether to run the job in parallel to others; default is true\n\n\n\n\n\nDetails\n\n\nTo view electrodes implanted in multiple subjects, it’s highly recommended to view them in a template space The detail mapping method is discussed in function freesurfer_brain.\n\n\nTo map to a template space, one idea is to find someone whose brain is normal. In our case, the choice is subject ‘N27’, also known as ‘Colin 27’. function download_N27 provides a simple and easy way to download a partial version from the Internet.\n\n\nIf you have any other ideas about template brain, you can use function set_default_template(subject_code, template_dir) to redirect to your choice. If your template brain is a ‘Zip’ file on the Internet, we provide function download_template_subject to automatically install it.\n\n\nAuthor(s)\n\n\nZhengjia Wang"
  },
  {
    "objectID": "posts/editor-notes/how-to-edit-this-website.html",
    "href": "posts/editor-notes/how-to-edit-this-website.html",
    "title": "How to Edit this Website",
    "section": "",
    "text": "This post is an introduction on how to edit the website (rave.wiki), which completely runs on Github with no dedicated hosting servers.\nTo start, you must have a Github account and must apply to be a member of rave-ieeg group."
  },
  {
    "objectID": "posts/editor-notes/how-to-edit-this-website.html#create-a-new-documentation",
    "href": "posts/editor-notes/how-to-edit-this-website.html#create-a-new-documentation",
    "title": "How to Edit this Website",
    "section": "1. Create a new documentation",
    "text": "1. Create a new documentation\nIf you want to edit an existing page, see 3. Edit an existing page\nAll the documentation files are stored at directory posts/, which contains several folders that roughly classify the documents.\n\nTo add a new documentation page, open https://github.com/rave-ieeg/rave-ieeg.github.io/tree/main/posts. Please select a proper folder for the document, click on “Add File” button (see Figure 1), and click on “Create new file”.\n\n\n\nFigure 1: Screenshot of Github buttons to create a new file.\n\n\nGithub will open its online editor. The first thing to do is to give your new baby a good name, which should start with letters (a-z or A-Z) and often end with file extension .md (stands for “Markdown” format).\n\n\n\nFigure 2: Create a new file name: avoid special letters especially / in the file name (unless you want to create a folder). Filenames starting with _ will be “hidden” markdown snippets that will not be rendered as a page. However, it can be included in other documents (see Section “[3. Edit markdown files]” below).\n\n\nAfter choosing the file name, copy the following meta header into the content box. Make sure you copy the entire header (including “---”). Edit the key information such as title, description, date, author, and categories as they will affect how the page is arranged and displayed in the Documentation page.\n---\ntitle: \"How to Edit this Website\"\ndescription: |\n  Editor's notes on how to edit this website\ndate: 2024-09-01\nauthor: \n  - name: Zhengjia Wang\n    affiliations: \n      - name: \"Dept. of Neurosurgery, University of Pennsylvania\"\ncategories:\n  - \"Editor's Notes\"\ncopyright: \n  holder: Beauchamp's Lab\n  year: 2024\n---\nStart a new line after the second dash “---”, and now you can begin editing the content (See Section “[3. Edit markdown files]” below on how to format your content)."
  },
  {
    "objectID": "posts/editor-notes/how-to-edit-this-website.html#save-the-page",
    "href": "posts/editor-notes/how-to-edit-this-website.html#save-the-page",
    "title": "How to Edit this Website",
    "section": "2. Save the page",
    "text": "2. Save the page\nWe all have experienced losing unsaved work. To avoid such frustration, it is a good practice to save the page before you regret.\nOn Github, “saving the work” is called Commit changes. To commit the pages you have just created, simply scroll up to the top of the editor, and you will see the button Commit changes with an outstanding color (green?). Click on this button, please ensure that the commit is made directly to the main branch. You are more than welcome to comment on the changes. For example, “This is my first page!”, “I feel fantastic”, or “The best Philly cheese steak I’ve ever had was in Houston” for back-tracking the website history. However, comment is completely optional."
  },
  {
    "objectID": "posts/editor-notes/how-to-edit-this-website.html#edit-an-existing-page",
    "href": "posts/editor-notes/how-to-edit-this-website.html#edit-an-existing-page",
    "title": "How to Edit this Website",
    "section": "3. Edit an existing page",
    "text": "3. Edit an existing page\nTo edit an existing page, you need to find the location of the source document. The easiest method is to open the RAVE website and navigate to the page that you want to edit. The content-bar should contain the following options:\n\n\n\n\n\nClick on “ Edit this page”, and the browser should take you directly to the editor page. Please BE AWARE that if Github asks you to “fork” the project, DON’T do it. Check if you have logged out of the Github. Please make sure you are logged into the Github!"
  },
  {
    "objectID": "posts/editor-notes/how-to-edit-this-website.html#edit-markdown-files",
    "href": "posts/editor-notes/how-to-edit-this-website.html#edit-markdown-files",
    "title": "How to Edit this Website",
    "section": "4. Edit markdown files",
    "text": "4. Edit markdown files\nThis website is based on Pandoc and uses its variation of markdown as its underlying document syntax. Markdown is a plain text format that is designed to be easy to write, and, even more importantly, easy to read.\nThere are many tutorials on how to edit markdown files. The following tutorial comes from quarto documentation. Most of the time you only need to remember the basics such as text formatting, headings, list, links and images.\nHere is a list of common types. Pick one to see the format:\n\n\n\n\n\n\nHeadings\n\n\n\n\n\n\n\n\n\n\n\n\nMarkdown Syntax\nOutput\n\n\n\n\n# Header 1\nHeader 1\n\n\n## Header 2\nHeader 2\n\n\n### Header 3\nHeader 3\n\n\n#### Header 4\nHeader 4\n\n\n##### Header 5\nHeader 5\n\n\n###### Header 6\nHeader 6\n\n\n\n\n\n\n\n\n\n\n\n\nText Formatting\n\n\n\n\n\n\n\n\n\n\n\n\nMarkdown Syntax\nOutput\n\n\n\n\n*italics*, **bold**, ***bold italics***\nitalics, bold, bold italics\n\n\nsuperscript^2^ / subscript~2~\nsuperscript2 / subscript2\n\n\n~~strikethrough~~\nstrikethrough\n\n\n`verbatim code`\nverbatim code\n\n\n&gt; Blockquote\n\nBlockquote\n\n\n\n::: {.classname}\nDiv\n:::\n\nDiv\n\n\n\n| Line Block\n|   Spaces and newlines\n|   are preserved\nLine Block\n   Spaces and newlines\n   are preserved\n\n\nendash: --\nendash: –\n\n\nemdash: ---\nemdash: —\n\n\n\n\n\n\n\n\n\n\n\n\nLists\n\n\n\n\n\n\n\n\n\n\n\n\nMarkdown Syntax\nOutput\n\n\n\n\n* unordered list\n    + sub-item 1\n    + sub-item 2\n        - sub-sub-item 1\n\nunordered list\n\nsub-item 1\nsub-item 2\n\nsub-sub-item 1\n\n\n\n\n\n*   item 2\n\n    Continued (indent 4 spaces)\n\nitem 2\nContinued (indent 4 spaces)\n\n\n\n1. ordered list\n2. item 2\n    i) sub-item 1\n         A.  sub-sub-item 1\n\nordered list\nitem 2\n\nsub-item 1\n\nsub-sub-item 1\n\n\n\n\n\n- [ ] Task 1\n- [x] Task 2\n\nTask 1\nTask 2\n\n\n\n(@)  A list whose numbering\n\ncontinues after\n\n(@)  an interruption\n\nA list whose numbering\n\ncontinues after\n\nan interruption\n\n\n\n::: {}\n1. A list\n:::\n\n::: {}\n1. Followed by another list\n:::\n\n\nA list\n\n\n\n\nFollowed by another list\n\n\n\n\nterm\n: definition\n\nterm\n\ndefinition\n\n\n\n\n\nNote that unlike other Markdown renderers (notably Jupyter and GitHub), lists in rave.wiki require an entire blank line above the list. Otherwise the list will not be rendered in list form, rather it will all appear as normal text along a single line.\n\n\n\n\n\n\n\n\n\nFootnotes1\n\n\n\n\n\nPandoc supports numbering and formatting footnotes using the following syntax:\nHere is a footnote reference,[^1] and another.[^longnote]\n\n[^1]: Here is the footnote.\n\n[^longnote]: Here's one with multiple blocks.\n\n    Subsequent paragraphs are indented to show that they\nbelong to the previous footnote.\n\n        { some.code }\n\n    The whole paragraph can be indented, or just the first\n    line.  In this way, multi-paragraph footnotes work like\n    multi-paragraph list items.\n\nThis paragraph won't be part of the note, because it\nisn't indented.\nThe above syntax generates the following output:\n\nHere is a footnote reference,2 and another.3\nThis paragraph won’t be part of the note, because it isn’t indented.\n\nIn addition, you can also write single paragraph footnotes inline using the following syntax:\nHere is an inline note.^[Inlines notes are easier to write,\nsince you don't have to pick an identifier and move down to\ntype the note.]\nThis syntax generates the following output:\n\nHere is an inline note.4\n\nThe footnotes that are generated from the above examples are included in the Example Footnotes section at the bottom of the page. See the Pandoc Footnotes for additional information.\n\n\n\n\n\n\n\n\n\nMedia (link, figure, video, …) \n\n\n\n\n\n\nLinks & Images\nIf you want to include your own figures, please upload figures from Github. Make sure the figure is at the same directory as the markdown file.\n\n\n\nMarkdown Syntax\nOutput\n\n\n\n\n&lt;https://rave.wiki&gt;\nlink\nhttps://rave.wiki\n\n\n[RAVE Website](https://rave.wiki)\nlink with different text\nRAVE Website\n\n\n![Caption](rave-neuroimage.webp)\nimage\n\n\n\nCaption\n\n\n\n\n![Caption](rave-neuroimage.webp){width=\"30%\"}\nimage with 30% width\n\n\n\nCaption\n\n\n\n\n[![Caption](rave-neuroimage.webp){width=\"30%\"}](https://rave.wiki)\nimage with link\n\n\n\n[![Caption](rave-neuroimage.webp \"RAVE\"){width=\"30%\"}](https://rave.wiki)\nimage with link and tooltip (hover text)\n\n\n\n[![](missing-image.webp){width=\"30%\" fig-alt=\"ss\"}](https://rave.wiki)\nimage with link: alt-text when image is missing\n\n\n\n\n\n\nVideos\nYou can include videos in documents using the {{&lt; video &gt;}} shortcode. For example, here we embed a YouTube video:\n{{&lt; video https://www.youtube-nocookie.com/embed/watch?v=hfHZMfqIaGY &gt;}}\nVideos can refer to video files (e.g. MPEG) or can be links to videos published on YouTube, Vimeo, or Brightcove. Learn more in the article on Videos.\n\n\n\n\n\n\n\n\n\n\nTables\n\n\n\n\n\n\nMarkdown Syntax\n| Right | Left | Default | Center |\n|------:|:-----|---------|:------:|\n|   12  |  12  |    12   |    12  |\n|  123  |  123 |   123   |   123  |\n|    1  |    1 |     1   |     1  |\n\n\nOutput\n\n\n\nRight\nLeft\nDefault\nCenter\n\n\n\n\n12\n12\n12\n12\n\n\n123\n123\n123\n123\n\n\n1\n1\n1\n1\n\n\n\nLearn more in the article on Tables.\n\n\n\n\n\n\n\n\n\n\nSource Code\n\n\n\n\n\nUse ``` to delimit blocks of source code:\n```\ncode\n```\nAdd a language to syntax highlight code blocks:\n```r\nrave::start_rave2()\n```\n```python\nimport numpy as np\n```\nPandoc supports syntax highlighting for over 140 different languages. If your language is not supported then you can use the default language to get a similar visual treatment:\n```default\ncode\n```\n\n\n\n\n\n\n\n\n\n\\(E_{quations}\\)\n\n\n\n\n\nUse $ delimiters for inline math and $$ delimiters for display math. For example:\n\n\n\n\n\n\n\nMarkdown Syntax\nOutput\n\n\n\n\ninline math: $E = mc^{2}$\ninline math: \\(E=mc^{2}\\)\n\n\ndisplay math:\n\n$$E = mc^{2}$$\ndisplay math:\n\\[E = mc^{2}\\]\n\n\n\n\n\n\nHere are some advanced usages:\n\n\n\n\n\n\n&lt;HTML code&gt;\n\n\n\n\n\n\nRaw content without parsing\nRaw content can be included directly without parsing it. A raw block starts with ```{= followed by a format and closing }, e.g. here’s a raw HTML block:\n```{=html}\n&lt;iframe src=\"https://rave.wiki/\" width=\"500\" height=\"400\"&gt;&lt;/iframe&gt;\n```\n\n\nDivs and Spans\nFor HTML &lt;div&gt; and &lt;span&gt; tags, there is a better option. You can add classes, attributes, and other identifiers to regions of content using Divs and Spans. The difference between this type and “raw” content above is that the content inside ::: will be parsed as markdown.\nFor example, here we add the “border” class to a region of content using a div (:::):\n::: {.border}\nThis content can be styled with a border\n:::\nOnce rendered to HTML, Quarto will translate the markdown into:\n&lt;div class=\"border\"&gt;\n  &lt;p&gt;This content can be styled with a border&lt;/p&gt;\n&lt;/div&gt;\nDivs start with a fence containing at least three consecutive colons plus some attributes. The attributes may optionally be followed by another string of consecutive colons. The Div ends with another line containing a string of at least three consecutive colons. The Div should be separated by blank lines from preceding and following blocks. Divs may also be nested. For example\n::::: {#special .sidebar}\n\n::: {.warning}\nHere is a warning.\n:::\n\nMore content.\n:::::\nOnce rendered to HTML, Quarto will translate the markdown into:\n&lt;div id=\"special\" class=\"sidebar\"&gt;\n  &lt;div class=\"warning\"&gt;\n    &lt;p&gt;Here is a warning.&lt;/p&gt;\n  &lt;/div&gt;\n  &lt;p&gt;More content.&lt;/p&gt;\n&lt;/div&gt;\nFences without attributes are always closing fences. Unlike with fenced code blocks, the number of colons in the closing fence need not match the number in the opening fence. However, it can be helpful for visual clarity to use fences of different lengths to distinguish nested divs from their parents.\nA bracketed sequence of inlines, as one would use to begin a link, will be treated as a Span with attributes if it is followed immediately by attributes:\n[This is *some text*]{.class key=\"val\"}\nOnce rendered to HTML, Quarto will translate the markdown into:\n&lt;span class=\"class\" data-key=\"val\"&gt;\n  This is &lt;em&gt;some text&lt;/em&gt;\n&lt;/span&gt;\n\n\n\n\n\n\n\n\n\n\nCallouts (collapsible content)\n\n\n\n\n\n\nCallout\nCallouts are an excellent way to draw extra attention to certain concepts, or to more clearly indicate that certain content is supplemental or applicable to only some scenarios.\nThere are five different types of callouts available.\n\nnote\nwarning\nimportant\ntip\ncaution\n\nThe color and icon will be different depending upon the type that you select. Here are what the various types look like in HTML output:\n\n\n\n\n\n\nNote\n\n\n\nNote that there are five types of callouts, including: note, tip, warning, caution, and important.\n\n\n\n\n\n\n\n\nWarning\n\n\n\nCallouts provide a simple way to attract attention, for example, to this warning.\n\n\n\n\n\n\n\n\nThis is Important\n\n\n\nDanger, callouts will really improve your writing.\n\n\n\n\n\n\n\n\nTip With Title\n\n\n\nThis is an example of a callout with a title.\n\n\n\n\n\n\n\n\nExpand To Learn About Collapse\n\n\n\n\n\nThis is an example of a ‘collapsed’ caution callout that can be expanded by the user. You can use collapse=\"true\" to collapse it by default or collapse=\"false\" to make a collapsible callout that is expanded by default.\n\n\n\n\n\nMarkdown Syntax\nCreate callouts in markdown using the following syntax (note that the first markdown heading used within the callout is used as the callout heading):\n::: {.callout-note}\nNote that there are five types of callouts, including:\n`note`, `warning`, `important`, `tip`, and `caution`.\n:::\n\n::: {.callout-tip}\n## Tip with Title\n\nThis is an example of a callout with a title.\n:::\n\n::: {.callout-caution collapse=\"true\"}\n## Expand To Learn About Collapse\n\nThis is an example of a 'folded' caution callout that can be expanded by the user. You can use `collapse=\"true\"` to collapse it by default or `collapse=\"false\"` to make a collapsible callout that is expanded by default.\n:::\nNote that above callout titles are defined by using a heading at the top of the callout. If you prefer, you can also specify the title using the title attribute. For example:\n::: {.callout-tip title=\"Tip with Title\"}\nThis is a callout with a title.\n:::\n\nCustomizing Appearance\n\nCollapse\nYou can create ‘folded’ callouts that can be expanded by the user by settings the collapse attribute on the callout. If you set collapse=true, the callout will be expandable, but will be collapsed by default. If you set collapse=false, the callout will be expandable, but will be expanded by default.\n\n\nAppearance\nCallouts have 3 different looks you can use.\n\n\n\n\n\n\n\ndefault\nThe default appearance with colored header and an icon.\n\n\nsimple\nA lighter weight appearance that doesn’t include a colored header background.\n\n\nminimal\nA minimal treatment that applies borders to the callout, but doesn’t include a header background color or icon.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPop-up dialogue (modal)\n\n\n\n\n\nModal is a great way to show dialogues with a catchy button. Here is an example:\n::: {.rave-modal data-type=\"botton\" data-class=\"btn btn-primary\" data-label=\"Click me!\" data-title=\"I am the title!\"}\n\nRAVE is a very powerful tool!\n\n:::\nOutput:\n\nRAVE is a very powerful tool!\n\nExplanation:\n\nElement class .rave-modal will let this website mark the content as modal content;\ndata-type=\"botton\" creates a button;\ndata-label will become the button label;\ndata-title is the title of pop-up dialogue;\ndata-class=\"btn btn-primary\" styles the button with solid primary background. Common styles are:\n\nNormal\ndata-class=“btn btn-primary” data-class=“btn btn-secondary” data-class=“btn btn-success” data-class=“btn btn-danger” data-class=“btn btn-warning” data-class=“btn btn-info” data-class=“btn btn-light” data-class=“btn btn-dark”\nOutlined\ndata-class=“btn btn-outline-primary” data-class=“btn btn-outline-secondary” data-class=“btn btn-outline-success” data-class=“btn btn-outline-danger” data-class=“btn btn-outline-warning” data-class=“btn btn-outline-info” data-class=“btn btn-outline-light” data-class=“btn btn-outline-dark”\nSize\ndata-class=“btn btn-lg btn-primary” data-class=“btn btn-sm btn-primary”\n\n\nHere is an example of customization:\n* ::: {.rave-modal data-type=\"span\" data-class=\"text-decoration-underline\" data-label=\"Click this link to show the message!\" data-title=\"Hello World!\"}\n  RAVE is a very powerful tool!\n  :::\n* ::: {.rave-modal data-type=\"span\" data-class=\"text-decoration-underline\" data-label=\"How about this one?\" data-title=\"Hello Again!\"}\n  RAVE is indeed a very powerful tool!\n  :::\nOutput:\n\n\nRAVE is a very powerful tool!\n\n\nRAVE is indeed a very powerful tool!\n\n\n\n\n\n\n\n\n\n\n\nDocument {snippets}\n\n\n\n\n\nWhen a document is too long, it is a good practice to break it down into several small snippets.\nFor example, the main source of this document how-to-edit-this-website.md only has around 200 lines. Most of the formatting details are separated out into small snippets.\nTo create a snippet, simply create a markdown document whose name starts with an underscore _. For example _markdown-advanced-snippet.md is the file name of text you are reading. Each document snippet is just a normal markdown file. They can be independently edited.\nTo include the snippet into the main document, you can use the following markdown:\n{{&lt; include _markdown-advanced-snippet.md &gt;}}\nDocument snippets work well with callouts and pop-up modals.\n\nHere’s an example using callouts\n::: {.callout collapse=\"true\" appearance=\"simple\"}\n### Document `{`snippets`}` \n\n{{&lt; include _markdown-advanced-snippet.md &gt;}}\n:::\nThis is an example using pop-up modal\n::: {.rave-modal data-type=\"botton\" data-class=\"btn btn-primary\" data-label=\"MacOS\" data-title=\"Prerequisite on MacOS\"}\n{{&lt; include _prerequisite_macos.md &gt;}}\n:::"
  },
  {
    "objectID": "posts/editor-notes/how-to-edit-this-website.html#markdown-syntax-1",
    "href": "posts/editor-notes/how-to-edit-this-website.html#markdown-syntax-1",
    "title": "How to Edit this Website",
    "section": "Markdown Syntax",
    "text": "Markdown Syntax\nCreate callouts in markdown using the following syntax (note that the first markdown heading used within the callout is used as the callout heading):\n::: {.callout-note}\nNote that there are five types of callouts, including:\n`note`, `warning`, `important`, `tip`, and `caution`.\n:::\n\n::: {.callout-tip}\n## Tip with Title\n\nThis is an example of a callout with a title.\n:::\n\n::: {.callout-caution collapse=\"true\"}\n## Expand To Learn About Collapse\n\nThis is an example of a 'folded' caution callout that can be expanded by the user. You can use `collapse=\"true\"` to collapse it by default or `collapse=\"false\"` to make a collapsible callout that is expanded by default.\n:::\nNote that above callout titles are defined by using a heading at the top of the callout. If you prefer, you can also specify the title using the title attribute. For example:\n::: {.callout-tip title=\"Tip with Title\"}\nThis is a callout with a title.\n:::\n\nCustomizing Appearance\n\nCollapse\nYou can create ‘folded’ callouts that can be expanded by the user by settings the collapse attribute on the callout. If you set collapse=true, the callout will be expandable, but will be collapsed by default. If you set collapse=false, the callout will be expandable, but will be expanded by default.\n\n\nAppearance\nCallouts have 3 different looks you can use.\n\n\n\n\n\n\n\ndefault\nThe default appearance with colored header and an icon.\n\n\nsimple\nA lighter weight appearance that doesn’t include a colored header background.\n\n\nminimal\nA minimal treatment that applies borders to the callout, but doesn’t include a header background color or icon."
  },
  {
    "objectID": "posts/editor-notes/how-to-edit-this-website.html#view-the-results",
    "href": "posts/editor-notes/how-to-edit-this-website.html#view-the-results",
    "title": "How to Edit this Website",
    "section": "5. View the results",
    "text": "5. View the results\n\n5.1 Preview during the editing\nGithub online editor provides a decent tool for previewing the results before publishing changes. This feature allows you to test different formatting ideas before saving changes. To preview the page, scroll up to the top of the editor and click on the Preview button right next to Edit. The markdown pre-render results will show up. To continue editing the pages, click on Edit button and the viewer will switch back.\n\n\n\n\n\n\n\n“Edit” mode\n“Preview” mode\n\n\n\n\n\n\n\n\n\n\n\n5.2 View the final results\nWhen you commit (save) the changes to the Github main repository branch, an Github bot will be invoked to render the whole website. This process is completely automatic and normally requires no manual intervention. Here is the link if you would like to track the progress out of curiosity: https://github.com/rave-ieeg/rave-ieeg.github.io/actions. The rendering process usually costs several minutes before the updates are deployed to RAVE website.\n\n\n\nScreenshot of RAVE website automatic building process."
  },
  {
    "objectID": "posts/editor-notes/how-to-edit-this-website.html#footnotes",
    "href": "posts/editor-notes/how-to-edit-this-website.html#footnotes",
    "title": "How to Edit this Website",
    "section": "Example Footnotes",
    "text": "Example Footnotes\n\n\nHere is the footnote.↩︎\nHere is the footnote.↩︎\nHere’s one with multiple blocks.\nSubsequent paragraphs are indented to show that they belong to the previous footnote.\n{ some.code }\nThe whole paragraph can be indented, or just the first line. In this way, multi-paragraph footnotes work like multi-paragraph list items.↩︎\nInlines notes are easier to write, since you don’t have to pick an identifier and move down to type the note.↩︎"
  },
  {
    "objectID": "posts/image_widgets/viewer401.html",
    "href": "posts/image_widgets/viewer401.html",
    "title": "Drag & Drop Objects to 3D Viewer",
    "section": "",
    "text": "This post contains interactive components (experimental) that allows you to execute RAVE code from the web browsers. If you would like to try this feature and customize/play with the code, please be patient. It might take a while for the browser to finish setting up (depending on your network speed). Once the script is ready, you will see “WEBR STATUS: 🟢 Ready!” in the above banner.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "posts/image_widgets/viewer401.html#how-to-use-this-demo",
    "href": "posts/image_widgets/viewer401.html#how-to-use-this-demo",
    "title": "Drag & Drop Objects to 3D Viewer",
    "section": "How to use this demo",
    "text": "How to use this demo\nThe 3D viewer supports dragging & dropping files for quick adhoc visualizations. Click on the links below to see different use-cases. If you would like to open the viewer locally and try it out, please download an offline version once the viewer is ready.\n\n\n\n\nExample file for this demo\n\nDrop GIfTI (*.gii), STL (*.stl), or FreeSurfer mesh files (*h.pial, *h.white, *h.smoothwm, *h.inflated, …)\nTo clear the object, open Configure ROI Surfaces &gt; Clear Uploaded Surfaces\n\n\n\n\n\nExample files: left hemisphere and right hemisphere\n\nDrop FreeSurfer annotation (*.annot) or curvature files (*.curv or *.sulc)\nTo clear the object, open Configure ROI Surfaces &gt; Clear Uploaded Surfaces\n\n\n\n\n\nExample file for this demo\n\nDrop in a NIfTI (*.nii, *.nii.gz) or a MGZ (*.mgz) file\nClamp volume via threshold using Clipping Min/Max\nSet color map to “continuous” or “single color”\n\n\n\n\n\nExample file for this demo\n\nDrop in a NIfTI (*.nii, *.nii.gz) or a MGZ (*.mgz) file\nSet color map to “discrete”\nSubset and enter the atlas labels in Volume Settings &gt; Voxel Label\nGenerate quick surface from the labels by clicking Update ISO Surface\n\n\n\n\n\nExample file for this demo\n\nPrepare an electrode coordinate file (see an example from the link above). The bare minimum columns are Electrode (channel number), Label (contact label), and anatomical coordinates (see below)\n\nFor visualizing on template brain, please specify either column set MNI152_x, MNI152_y, MNI152_z (known as the MNI coordinate) or MNI305_x, MNI305_y, MNI305_z (known as fsaverage coordinate)\nFor visualizing on native brain, specify T1R, T1A, T1S (scanner RAS coordinate) or Coord_x, Coord_y, Coord_z (surface, or FreeSurfer tk-registered coordinate)\n\n\n\n\n\n\nExample coordinate file & value table\n\nFirst, drop in an electrode coordinate file (see the example coordinate file above)\nThen, drop in an electrode value table with Electrode, Time, and one or more variable columns (see the example value table above)\nFinally, turn on Data Visualization &gt; Play/Pause to start animation\n(Optional) to hide inactive electrodes, go to Electrode Settings &gt; Visibility, and set to “hide inactives”\n\n\n\n\n\nExample file for this demo\n\nGo to Default &gt; Copy Controller State, the viewer state will be copied to the clipboard (download the example data to see what is inside)\nYou can directly copy the state string to the text box (Default &gt; Paste to set State) or save the string to a json file and drag & drop in\n\n\n\n\n\nDownload this example file and try out! The file is essentially a json file with one flag, some global parameters and settings for each transition.\n\nThe flag is \"isThreeBrainTransition\": true, allowing RAVE to know how to handle the file\nGlobal parameters include\n\nresetCanvas: whether to reset canvas to its default state before applying transition animation\nloops: number of additional loops\ntrasitionDuration: duration of a transition, can be set at stage-level\ntransitionTimeout: total timeout for each transition before switching to the next state, can be set at stage-level\n\nThe transition data is an array of states:\n\nbackground: the canvas background\ncameraMain: contains camera position, up direction, and zoom level\nEach controllers list sets the controller values at beginning of the transition (immediate), interpolated animation (animated), and at the end of the transition (delayed)"
  },
  {
    "objectID": "posts/installation/update.html",
    "href": "posts/installation/update.html",
    "title": "Updating and Upgrading Guide",
    "section": "",
    "text": "Because RAVE runs on top of R and RStudio, it is important to update both of these before updating RAVE. For major updates (about every 6-12 months) it is necessary to completely reinstall:\nClick here to see instructions on\n\n\n0. Check if you are logged into an admin account\nMacOS requires users to have administrator (admin) privileges to install applications. At several points during the installation, MacOS will ask for your account password to verify installation. Installation will fail if your MacOS account doesn’t have admin privileges.\n\nHow to check if I have an admin account?\n\nOpen Terminal (in the /Applications/Utilities folder). Copy the command line shown below into the terminal window.\n sudo ls\nYou will be prompted for a password. This is the password of the MacOS account you are logged in as. If you have an admin account, MacOS will show the files in the current directory. If not, you will receive an error message. Alternately, click anywhere on the desktop to activate the MacOS menu bar, click on the Apple icon at the top left of the menu bar, then “System Preferences” or “System Settings”, then “Users & Groups”. Find your current account and verify that it has admin privileges.\n\nWhat if I don’t have an admin account?\n\nYou will need to create a new account with admin privileges or change the privileges of your current account, see https://support.apple.com/guide/mac-help/change-users-groups-settings-mtusr001/mac . If your computer is administered by others, ask them to create an admin account for you.\n\n\n1. Install R, version 4 or higher\nClick here to install the latest version of the R language for Mac. Find the latest package (.pkg) file, click to download, then open and install. There are different versions of R for older Macs with Intel CPUs and newer Macs with Apple CPUs (M1/M2). Choose the correct version, either “Intel 64-bit” or “Apple silicon ARM64”.\nTo verify R installation: R will be installed in the /Applications folder. Open this folder and double-click on the R icon to start R. After starting R, we recommend that you right-click on the R icon in the Dock and select “Options”/“Keep in Dock” to make it easier to launch with a single click. We also recommend starting R, opening the “Preferences”/“Startup” tab, and change “Save workspace on exit from”R” to “No”. Uncheck the box “Read history file on startup”. To check the current version of “R”, start R and enter the following into the console:\nR.version\nThis will produce a number of lines of output, beginning with something like\n platform       x86_64-apple-darwin17.0     \n arch           x86_64\n\n\n2. homebrew package manager\nInstallation requires the latest version of the homebrew package manager. Open Terminal (in the /Applications/Utilities folder). Copy the command line shown below into the terminal window.\n/usr/bin/env bash\nCopy the line below into the terminal window.\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\nThis step will take several minutes to complete. Wait until the installation is finished and the command prompt reappears before moving to the next step.\nAdd brew to your path or the next installation steps will fail. The installer provides the necessary command lines in the Terminal window at the conclusion of the previous step. Execute them in the same terminal window by copying and pasting. They will look something like\necho 'eval \"$(/opt/homebrew/bin/brew shellenv)\"' &gt;&gt; ~/.zprofile\neval \"$(/opt/homebrew/bin/brew shellenv)\"\nThese commands will not produce any output.\nTo verify brew installation: Copy the command line shown below into the terminal window.\nbrew --version\nShould produce a result like\n Homebrew 3.4.1\n Homebrew/homebrew-core (git revision f03c984ad7; last commit 2022-03-08)\n\n\n3. Install libraries using brew\nEnter this command into the terminal window:\nbrew install hdf5 fftw pkg-config cmake libpng\nThis step will install the hdf5 (high-performance file system), fftw (fast-fourier transform library), pkg-config (package configuration toolbox), cmake (cross-platform make for compiling optional packages such as ant), libpng (library for manipulating png images) and takes several minutes to complete. Wait until the installation is finished and the command prompt reappears before moving to the next step.\n\n\n4. Finished with prerequisites\nScroll to the top of the page and click on the “Install” tab to return to the full installation guide.\n\n\n5. Troubleshooting\nYou may receive this message\n Warning: macOS is reporting that you have not yet agreed to the Xcode license. This can occur if Xcode has been updated or reinstalled (e.g. as part of a macOS update). Some features (e.g. Git / SVN) may be disabled.\nTo make this error go away, open the Terminal app in the Applications folder, enter\nsudo xcodebuild -license accept\nThen restart RStudio. A helpful article in case of XCode installation errors.\nIf the XCode download from the RStudio install in step 2 fails, install the command line tools manually. First, download XCode. Click “GET” (if instead you see “OPEN”, then Xcode is already installed.) Open the Terminal app in the Applications folder, enter\nxcode-select --install\nClick “yes” to proceed with installing the command-line tools. The message “xcode-select: error: command line tools are already installed” means that you can proceed.\n\n\n\nThese instructions are for Windows 10 with “bash” enabled. You will be asked many questions by the installers; the default response is fine for all of them.\n\n1. Install the latest version of the R language\nGo to https://cran.r-project.org/bin/windows/base/ and download the latest R.\nOpen the installer and click through to install\n\n\n2. Install the latest version of RTools.\nGo to https://cran.r-project.org/bin/windows/Rtools/ and download a proper version of RTools. The version must match your version of R. RTools contains compilers used to compile packages\n\n\n\n\nIf you encounter difficulties, email help@rave.wiki.\n\nTo install R, please go to https://cran.r-project.org/ and read installation guide for Linux system. The following guide is for Ubuntu 20.x (x86_64) system. Please do ALWAYS read R’s official installation guide.\n\n1. Add R-Cran repository to your app list:\nOpen terminal (if you don’t know how, look at your sidebar in Ubuntu, search your computer enter terminal, and open it), type the following code:\n# update indices\nsudo apt update -qq\n# install two helper packages we need\nsudo apt install --no-install-recommends software-properties-common dirmngr\n# add the signing key (by Michael Rutter) for these repos\n# To verify key, run gpg --show-keys /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc \n# Fingerprint: E298A3A825C0D65DFD57CBB651716619E084DAB9\nwget -qO- https://cloud.r-project.org/bin/linux/ubuntu/marutter_pubkey.asc | sudo tee -a /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc\n# add the R 4.0 repo from CRAN -- adjust 'focal' to 'groovy' or 'bionic' as needed\nsudo add-apt-repository \"deb https://cloud.r-project.org/bin/linux/ubuntu $(lsb_release -cs)-cran40/\"\n\n\n2. Install R\nCopy the following command line by line into your terminal and run\nsudo apt-get install r-base r-base-dev\n\n\n3. Type and enter “R” your terminal. This launches R from your terminal.\nCopy the following command line by line into your terminal and run\ninstall.packages('ravemanager', repos = 'https://rave-ieeg.r-universe.dev')\nravemanager::system_requirements(sudo = TRUE)\nIf your operating system is supported, it will print out all the system libraries needed.\n\n\n4. Install compiling tools and system dependencies\nOpen a new terminal window, copy the installation script generated from the last step into this new window. For example, on Ubuntu 20.x,\nsudo apt-get install -y build-essential file git psmisc procps sudo wget make cmake \\\n libsodium-dev libffi-dev libbz2-dev libpcre2-dev libcairo2-dev libssh2-1-dev libtiff5-dev libv8-dev \\\n libicu-dev zlib1g-dev libcurl4-openssl-dev libssl-dev libfontconfig1-dev libfreetype6-dev \\\n libfribidi-dev libharfbuzz-dev libjpeg-dev libpng-dev libtiff-dev pandoc libxml2-dev git libgit2-dev \\\n libfftw3-dev libhdf5-dev libglpk-dev libgmp3-dev libzmq3-dev python3\nThe packages libv8-dev is for V8 package to enable JavaScript. libxml2-dev is for xml2. libfftw3-dev libtiff5-dev are necessary for fast-fourier transformations and libhdf5-dev is for reading and writing data in open data format HDF5. All the other packages are necessary for devtools (compilers)\n\n\n5. Install the free version of RStudio Desktop here:\nGo to https://posit.co/download/rstudio-desktop/ and download one with keywords “Ubuntu xxx/Debian xxx” (depending on your system version), move the downloaded file to your desktop, rename it “rstudio.deb”.\nOpen terminal, type the following command in your terminal\ncd ~/Desktop\nsudo dpkg -i ./rstudio.deb \nand RStudio should be in your application list. If not, look at your sidebar in Ubuntu, click search your computer and enter “RStudio”.\n\n\n\nFor minor updates, start RStudio, “Help”/“Check for Updates”; start R, “R”/“Check For R Updates”).\nIf you have a RAVE version older than October 2022, you must first enter the following command into the R console (if you are not sure, it is OK to run it just in case).\nlib_path &lt;- Sys.getenv(\"RAVE_LIB_PATH\", unset = Sys.getenv(\"R_LIBS_USER\", unset = .libPaths()[[1]]))\ninstall.packages('ravemanager', repos = 'https://rave-ieeg.r-universe.dev', lib = lib_path)\nRegardless of your current RAVE version, enter the following command into the R console:\nravemanager::version_info()\nThis prints out current RAVE package versions. If all the core packages are up-to-date, you will see the message “Everything is up to date”, otherwise please follow the following steps. Quit all instance of R and RStudio before proceeding, or RAVE will not be able to update. Restart R and enter the following command into the R console :\nlib_path &lt;- Sys.getenv(\"RAVE_LIB_PATH\", unset = Sys.getenv(\"R_LIBS_USER\", unset = .libPaths()[[1]]))\nloadNamespace(\"ravemanager\", lib.loc = lib_path)\nravemanager::update_rave()\nPress “enter” if you are asked “yes/no/cancel”.\nAfter this command completes, quit and restart RStudio. Then restart the updated RAVE:\nrave::start_rave2()\nNotes: Be sure to quit ALL other running R and RStudio instances before running “ravemanager::update_rave()”, otherwise packages will be locked and upgrade will fail. For other problems, the fallback is to completely reinstall RAVE.\n\n\n\nReuseCC BY 4.0"
  }
]