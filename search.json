[
  {
    "objectID": "posts/3dviewer/viewer301.html",
    "href": "posts/3dviewer/viewer301.html",
    "title": "Make a group brain",
    "section": "",
    "text": "Here is an interactive demo showing two subjects mapped to a template MNI152 brain."
  },
  {
    "objectID": "posts/3dviewer/viewer301.html#demo-make-group-level-visualization-on-a-template-brain",
    "href": "posts/3dviewer/viewer301.html#demo-make-group-level-visualization-on-a-template-brain",
    "title": "Make a group brain",
    "section": "",
    "text": "Here is an interactive demo showing two subjects mapped to a template MNI152 brain."
  },
  {
    "objectID": "posts/3dviewer/viewer301.html#create-template-brain",
    "href": "posts/3dviewer/viewer301.html#create-template-brain",
    "title": "Make a group brain",
    "section": "1. Create template brain",
    "text": "1. Create template brain\nFunction threeBrain::merge_brain provides high-level function to load individual subjects’ brain on a given template. See the following example:\nb1 &lt;- raveio::rave_brain(\"YAEL/PAV037\")\nb2 &lt;- raveio::rave_brain(\"YAEL/PAV038\")\n\ntemplate &lt;- threeBrain::merge_brain(b1, b2)\nJust like individual RAVE brain object, template also has method template$set_electrode_values to set electrode values and template$plot to visualize the group brain\ncsv_path &lt;- \"path/to/your/electrode_value.csv\"\ntemplate$set_electrode_values(csv_path)\n\ntemplate$plot()\nAlternatively, users can set electrode values for each individual subject\nb1$set_electrode_values(table1)\nb2$set_electrode_values(table2)\n..."
  },
  {
    "objectID": "posts/3dviewer/viewer301.html#choose-a-proper-template",
    "href": "posts/3dviewer/viewer301.html#choose-a-proper-template",
    "title": "Make a group brain",
    "section": "2. Choose a proper template",
    "text": "2. Choose a proper template\nThe default template is N27 Collin’s brain. RAVE offers other built-in templates that can be queried via function threeBrain::available_templates(). The following code downloads a MNI152 brain:\ntemplate_subject &lt;- \"cvs_avg35_inMNI152\"\ntemplate_root &lt;- threeBrain::default_template_directory()\nif(!dir.exists(file.path(template_root, template_subject))) {\n  threeBrain::download_template_subject(template_subject)\n}\nNow you can use this template\ntemplate &lt;- threeBrain::merge_brain(\n  b1, b2, \n  template_subject = template_subject\n)\ntemplate$plot()"
  },
  {
    "objectID": "posts/3dviewer/viewer301.html#a-full-example-with-customized-render-options",
    "href": "posts/3dviewer/viewer301.html#a-full-example-with-customized-render-options",
    "title": "Make a group brain",
    "section": "3. A full example with customized render options",
    "text": "3. A full example with customized render options\n# Using MNI152 template\ntemplate_subject &lt;- \"cvs_avg35_inMNI152\"\ntemplate_root &lt;- threeBrain::default_template_directory()\nif(!dir.exists(file.path(template_root, template_subject))) {\n  threeBrain::download_template_subject(template_subject)\n}\n\n# Load subject brain\nb1 &lt;- raveio::rave_brain(\"YAEL/PAV037\")\nb2 &lt;- raveio::rave_brain(\"YAEL/PAV038\")\n\n# create template brain\ntemplate &lt;- threeBrain::merge_brain(\n  b1, b2, \n  template_subject = template_subject\n)\n\n# set electrode values\nb1$set_electrode_values()\nb2$set_electrode_values()\n\n# plot with options\ntemplate$plot()\n\n\n\nThis is a screenshot of the output. Please scroll to the top to play with the 3D viewer demo"
  },
  {
    "objectID": "posts/3dviewer/viewer301.html#key-documentations",
    "href": "posts/3dviewer/viewer301.html#key-documentations",
    "title": "Make a group brain",
    "section": "Key Documentations",
    "text": "Key Documentations\n\nFunction merge_brain\n\nCreate Multi-subject Template\n\nmerge_brain\n\nDescription\n\n\nCreate Multi-subject Template\n\n\nUsage\n\nmerge_brain(\n  ...,\n  .list = NULL,\n  template_surface_types = NULL,\n  template_subject = unname(getOption(\"threeBrain.template_subject\", \"N27\")),\n  template_dir = default_template_directory()\n)\n\n\nArguments\n\n\n\n\n…, .list\n\n\n\nBrain2 objects\n\n\n\n\n\ntemplate_surface_types\n\n\n\nwhich template surface types to load, default is auto-guess\n\n\n\n\n\ntemplate_subject\n\n\n\ncharacter, subject code to be treated as template, default is ‘N27’\n\n\n\n\n\ntemplate_dir\n\n\n\nthe parent directory where template subject is stored in\n\n\n\n\n\nAuthor(s)\n\n\nZhengjia Wang\n\n\n\nFunction download_template_subject\n\nDownload and Manage Template Subjects\n\ntemplate_subject\n\nDescription\n\n\nDownload and Manage Template Subjects\n\n\nUsage\n\ndownload_template_subject(\n  subject_code = \"N27\",\n  url,\n  template_dir = default_template_directory()\n)\n\ndownload_N27(make_default = FALSE, ...)\n\nset_default_template(\n  subject_code,\n  view = TRUE,\n  template_dir = default_template_directory()\n)\n\nthreebrain_finalize_installation(\n  upgrade = c(\"ask\", \"always\", \"never\", \"data-only\", \"config-only\"),\n  async = TRUE\n)\n\navailable_templates()\n\n\nArguments\n\n\n\n\nsubject_code\n\n\n\ncharacter with only letters and numbers (Important); default is ‘N27’\n\n\n\n\n\nurl\n\n\n\nzip file address; must be specified if subject_code is not from the followings: ‘bert’, ‘cvs_avg35’, ‘cvs_avg35_inMNI152’, ‘fsaverage’, ‘fsaverage_sym’, or ‘N27’\n\n\n\n\n\ntemplate_dir\n\n\n\nparent directory where subject’s ‘FreeSurfer’ folder should be stored\n\n\n\n\n\nmake_default\n\n\n\nlogical, whether to make ‘N27’ default subject\n\n\n\n\n\n…\n\n\n\nmore to pass to download_template_subject\n\n\n\n\n\nview\n\n\n\nwhether to view the subject\n\n\n\n\n\nupgrade\n\n\n\nwhether to check and download ‘N27’ brain interactively. Choices are ‘ask’, ‘always’, and ‘never’\n\n\n\n\n\nasync\n\n\n\nwhether to run the job in parallel to others; default is true\n\n\n\n\n\nDetails\n\n\nTo view electrodes implanted in multiple subjects, it’s highly recommended to view them in a template space The detail mapping method is discussed in function freesurfer_brain.\n\n\nTo map to a template space, one idea is to find someone whose brain is normal. In our case, the choice is subject ‘N27’, also known as ‘Colin 27’. function download_N27 provides a simple and easy way to download a partial version from the Internet.\n\n\nIf you have any other ideas about template brain, you can use function set_default_template(subject_code, template_dir) to redirect to your choice. If your template brain is a ‘Zip’ file on the Internet, we provide function download_template_subject to automatically install it.\n\n\nAuthor(s)\n\n\nZhengjia Wang"
  },
  {
    "objectID": "index.html#rave-reproducible-analysis-visualization-of-ieeg",
    "href": "index.html#rave-reproducible-analysis-visualization-of-ieeg",
    "title": "RAVE",
    "section": "RAVE: Reproducible Analysis & Visualization of iEEG ",
    "text": "RAVE: Reproducible Analysis & Visualization of iEEG \nRAVE is free and open-source software for the analysis of intracranial electroencephalogram (iEEG) data, including data collected using strips and grids (electrocorticography, ECoG) and depth electrodes (stereotactic EEG). A sister package to RAVE is the YAEL electrode localization toolkit.\n  RAVE is easy to use and creates publication-ready figures with absolutely no programming. RAVE can import standard data formats, including Matlab and EDF, and is compatible with BIDS-iEEG. It runs on laptops, lab servers, or in the cloud. Since all user interactions take place through a web browser, the user experience is identical on Mac, Windows and Linux. Data from RAVE can be exported for analysis using other software (click here for a list of iEEG analysis tools). Conversely, outside results can be imported and visualized using RAVE’s visualization engine. RAVE provides templates to make it easy to create GUI-based analyses using the streamlined application programming interface.\nJoin our growing RAVE-iEEG community on Slack . E-mail slack@rave.wiki for an invitation.\nRAVE has been developed since 2017 with funding provided by NIH R01MH133717 , U01NS113339, and 1R24MH117529. If you use RAVE for a publication, please cite:\n\nMagnotti JF, Wang Z, Beauchamp MS. RAVE: comprehensive open-source software for reproducible analysis and visualization of intracranial EEG data. NeuroImage (2020) 223:117341. [Click here for the journal full text] [Click here for the PDF] [Click here for the preprint].\n\nIf you use YAEL for electrode localization, please cite:\n\nWang Z, Magnotti JF, Zhang X, Beauchamp MS. YAEL: Your Advanced Electrode Localizer. Eneuro. 2023 Oct 1;10(10). [Click here for the journal full text] [Click here for the PDF]."
  },
  {
    "objectID": "index.html#installation",
    "href": "index.html#installation",
    "title": "RAVE",
    "section": "Installation",
    "text": "Installation\nPlease check our full installation guide here: https://openwetware.org/wiki/RAVE:Install"
  },
  {
    "objectID": "index.html#publications",
    "href": "index.html#publications",
    "title": "RAVE",
    "section": "Publications",
    "text": "Publications\nSend us your (p)reprint and we will add it to the list!\n\n\n\n\n\n\n\n\n\n\n\nRAVE: Comprehensive open-source software for reproducible analysis and visualization of intracranial EEG data\nJohn F. Magnotti, Zhengjia Wang, and Michael S. Beauchamp\n\nNeuroImage\n, \nDec 2020\n\n\n\n\nDOI: 10.1016/j.neuroimage.2020.117341\n\n\n\n\n\n\n\n\n\n\n\nYAEL: Your Advanced Electrode Localizer\nZhengjia Wang, John F. Magnotti, Xiang Zhang, and Michael S. Beauchamp\n\neNeuro\n, \nOct 2023\n\n\n\n\nDOI: 10.1523/ENEURO.0328-23.2023\n\n\n\n\n\n\n\n\n\n\n\nBeta activity in human anterior cingulate cortex mediates reward biases\nJiayang Xiao, Joshua A. Adkinson, John Myers, Anusha B. Allawala, Raissa K. Mathura, Victoria Pirtle, Ricardo Najera, Nicole R. Provenza, Eleonora Bartoli, Andrew J. Watrous, Denise Oswalt, Ron Gadot, Adrish Anand, Ben Shofty, Sanjay J. Mathew, Wayne K. Goodman, Nader Pouratian, Xaq Pitkow, Kelly R. Bijanki, Benjamin Hayden, and Sameer A. Sheth\n\nNature Communications\n, \nJuly 2024\n\n\n\n\nDOI: 10.1038/s41467-024-49600-7\n\n\n\n\n\n\n\n\n\n\n\nBayesian Image-on-Scalar Regression with a Spatial Global-Local Spike-and-Slab Prior\nZijian Zeng, Meng Li, and Marina Vannucci \n\nBayesian Analysis\n, \nMar 2024\n\n\n\n\nDOI: 10.1016/j.brs.2022.03.002\n\n\n\n\n\n\n\n\n\n\n\nIntracranial stimulation and EEG feature analysis reveal affective salience network specialization\nBrian A. Metzger, Prathik Kalva, Madaline M. Mocchi, Brian Cui, and Joshua A. Adkinson, Zhengjia Wang, Raissa Mathura, Kourtney Kanja, Jay Gavvala, Vaishnav Krishnan, Lu Lin, Atul Maheshwari, Ben Shofty, John F. Magnotti, Jon T. Willie, Sameer A. Sheth, Kelly R. Bijanki\n\nBrain: A Journal of Neurology\n, \nOct 2023\n\n\n\n\nDOI: 10.1093/brain/awad200\n\n\n\n\n\n\n\n\n\n\n\nFunctional group bridge for simultaneous regression and support estimation\nZhengjia Wang, John Magnotti, Michael S. Beauchamp, and Meng Li\n\nBiometrics\n, \nJun 2023\n\n\n\n\nDOI: 10.1111/biom.13684\n\n\n\n\n\n\n\n\n\n\n\nImaging versus electrographic connectivity in human mood-related fronto-temporal networks\nJoshua A. Adkinson, Evangelia Tsolaki, Sameer A. Sheth, Brian A. Metzger, and Meghan E. Robinson, Denise Oswalt, Cameron C. McIntyre, Raissa K. Mathura, Allison C. Waters, Anusha B. Allawala, Angela M. Noecker, Mahsa Malekmohammadi, Kevin Chiu, Richard Mustakos, Wayne Goodman, David Borton, Nader Pouratian, Kelly R. Bijanki\n\nBrain Stimulation\n, \nMay 2022\n\n\n\n\nDOI: 10.1016/j.brs.2022.03.002\n\n\n\n\n\n\n\n\n\n\n\nResponses to Visual Speech in Human Posterior Superior Temporal Gyrus Examined with iEEG Deconvolution\nBrian A. Metzger, John F. Magnotti, Zhengjia Wang, Elizabeth Nesbitt, and Patrick J. Karas, Daniel Yoshor, Michael S. Beauchamp \n\nThe Journal of Neuroscience: The Official Journal of the Society for Neuroscience\n, \nSep 2020\n\n\n\n\nDOI: 10.1523/JNEUROSCI.0279-20.2020\n\n\n\n\n\n\n\n\n\n\n\nThe visual speech head start improves perception and reduces superior temporal cortex responses to auditory speech\n Patrick J Karas, John F Magnotti, Brian A Metzger, Lin L Zhu, and Kristen B Smith, Daniel Yoshor, Michael S Beauchamp \n\neLife\n, \nAug 2019\n\n\n\n\nDOI: 10.7554/eLife.48116"
  },
  {
    "objectID": "posts/from_wiki/update.html",
    "href": "posts/from_wiki/update.html",
    "title": "Updating and Upgrading Guide",
    "section": "",
    "text": "Because RAVE runs on top of R and RStudio, it is important to update both of these before updating RAVE. For major updates (about every 6-12 months) it is necessary to completely reinstall:\nClick here to see instructions on\n\n\n0. Check if you are logged into an admin account\nMacOS requires users to have administrator (admin) privileges to install applications. At several points during the installation, MacOS will ask for your account password to verify installation. Installation will fail if your MacOS account doesn’t have admin privileges.\n\nHow to check if I have an admin account?\n\nOpen Terminal (in the /Applications/Utilities folder). Copy the command line shown below into the terminal window.\n sudo ls\nYou will be prompted for a password. This is the password of the MacOS account you are logged in as. If you have an admin account, MacOS will show the files in the current directory. If not, you will receive an error message. Alternately, click anywhere on the desktop to activate the MacOS menu bar, click on the Apple icon at the top left of the menu bar, then “System Preferences” or “System Settings”, then “Users & Groups”. Find your current account and verify that it has admin privileges.\n\nWhat if I don’t have an admin account?\n\nYou will need to create a new account with admin privileges or change the privileges of your current account, see https://support.apple.com/guide/mac-help/change-users-groups-settings-mtusr001/mac . If your computer is administered by others, ask them to create an admin account for you.\n\n\n1. Install R, version 4 or higher\nClick here to install the latest version of the R language for Mac. Find the latest package (.pkg) file, click to download, then open and install. There are different versions of R for older Macs with Intel CPUs and newer Macs with Apple CPUs (M1/M2). Choose the correct version, either “Intel 64-bit” or “Apple silicon ARM64”.\nTo verify R installation: R will be installed in the /Applications folder. Open this folder and double-click on the R icon to start R. After starting R, we recommend that you right-click on the R icon in the Dock and select “Options”/“Keep in Dock” to make it easier to launch with a single click. We also recommend starting R, opening the “Preferences”/“Startup” tab, and change “Save workspace on exit from”R” to “No”. Uncheck the box “Read history file on startup”. To check the current version of “R”, start R and enter the following into the console:\nR.version\nThis will produce a number of lines of output, beginning with something like\n platform       x86_64-apple-darwin17.0     \n arch           x86_64\n\n\n2. homebrew package manager\nInstallation requires the latest version of the homebrew package manager. Open Terminal (in the /Applications/Utilities folder). Copy the command line shown below into the terminal window.\n/usr/bin/env bash\nCopy the line below into the terminal window.\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\nThis step will take several minutes to complete. Wait until the installation is finished and the command prompt reappears before moving to the next step.\nAdd brew to your path or the next installation steps will fail. The installer provides the necessary command lines in the Terminal window at the conclusion of the previous step. Execute them in the same terminal window by copying and pasting. They will look something like\necho 'eval \"$(/opt/homebrew/bin/brew shellenv)\"' &gt;&gt; ~/.zprofile\neval \"$(/opt/homebrew/bin/brew shellenv)\"\nThese commands will not produce any output.\nTo verify brew installation: Copy the command line shown below into the terminal window.\nbrew --version\nShould produce a result like\n Homebrew 3.4.1\n Homebrew/homebrew-core (git revision f03c984ad7; last commit 2022-03-08)\n\n\n3. Install libraries using brew\nEnter this command into the terminal window:\nbrew install hdf5 fftw pkg-config cmake libpng\nThis step will install the hdf5 (high-performance file system), fftw (fast-fourier transform library), pkg-config (package configuration toolbox), cmake (cross-platform make for compiling optional packages such as ant), libpng (library for manipulating png images) and takes several minutes to complete. Wait until the installation is finished and the command prompt reappears before moving to the next step.\n\n\n4. Finished with prerequisites\nScroll to the top of the page and click on the “Install” tab to return to the full installation guide.\n\n\n5. Troubleshooting\nYou may receive this message\n Warning: macOS is reporting that you have not yet agreed to the Xcode license. This can occur if Xcode has been updated or reinstalled (e.g. as part of a macOS update). Some features (e.g. Git / SVN) may be disabled.\nTo make this error go away, open the Terminal app in the Applications folder, enter\nsudo xcodebuild -license accept\nThen restart RStudio. A helpful article in case of XCode installation errors.\nIf the XCode download from the RStudio install in step 2 fails, install the command line tools manually. First, download XCode. Click “GET” (if instead you see “OPEN”, then Xcode is already installed.) Open the Terminal app in the Applications folder, enter\nxcode-select --install\nClick “yes” to proceed with installing the command-line tools. The message “xcode-select: error: command line tools are already installed” means that you can proceed.\n\n\n\nThese instructions are for Windows 10 with “bash” enabled. You will be asked many questions by the installers; the default response is fine for all of them.\n\n1. Install the latest version of the R language\nGo to https://cran.r-project.org/bin/windows/base/ and download the latest R.\nOpen the installer and click through to install\n\n\n2. Install the latest version of RTools.\nGo to https://cran.r-project.org/bin/windows/Rtools/ and download a proper version of RTools. The version must match your version of R. RTools contains compilers used to compile packages\n\n\n\n\nIf you encounter difficulties, email help@rave.wiki.\n\nTo install R, please go to https://cran.r-project.org/ and read installation guide for Linux system. The following guide is for Ubuntu 20.x (x86_64) system. Please do ALWAYS read R’s official installation guide.\n\n1. Add R-Cran repository to your app list:\nOpen terminal (if you don’t know how, look at your sidebar in Ubuntu, search your computer enter terminal, and open it), type the following code:\n# update indices\nsudo apt update -qq\n# install two helper packages we need\nsudo apt install --no-install-recommends software-properties-common dirmngr\n# add the signing key (by Michael Rutter) for these repos\n# To verify key, run gpg --show-keys /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc \n# Fingerprint: E298A3A825C0D65DFD57CBB651716619E084DAB9\nwget -qO- https://cloud.r-project.org/bin/linux/ubuntu/marutter_pubkey.asc | sudo tee -a /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc\n# add the R 4.0 repo from CRAN -- adjust 'focal' to 'groovy' or 'bionic' as needed\nsudo add-apt-repository \"deb https://cloud.r-project.org/bin/linux/ubuntu $(lsb_release -cs)-cran40/\"\n\n\n2. Install R\nCopy the following command line by line into your terminal and run\nsudo apt-get install r-base r-base-dev\n\n\n3. Type and enter “R” your terminal. This launches R from your terminal.\nCopy the following command line by line into your terminal and run\ninstall.packages('ravemanager', repos = 'https://rave-ieeg.r-universe.dev')\nravemanager::system_requirements(sudo = TRUE)\nIf your operating system is supported, it will print out all the system libraries needed.\n\n\n4. Install compiling tools and system dependencies\nOpen a new terminal window, copy the installation script generated from the last step into this new window. For example, on Ubuntu 20.x,\nsudo apt-get install -y build-essential file git psmisc procps sudo wget make cmake \\\n libsodium-dev libffi-dev libbz2-dev libpcre2-dev libcairo2-dev libssh2-1-dev libtiff5-dev libv8-dev \\\n libicu-dev zlib1g-dev libcurl4-openssl-dev libssl-dev libfontconfig1-dev libfreetype6-dev \\\n libfribidi-dev libharfbuzz-dev libjpeg-dev libpng-dev libtiff-dev pandoc libxml2-dev git libgit2-dev \\\n libfftw3-dev libhdf5-dev libglpk-dev libgmp3-dev libzmq3-dev python3\nThe packages libv8-dev is for V8 package to enable JavaScript. libxml2-dev is for xml2. libfftw3-dev libtiff5-dev are necessary for fast-fourier transformations and libhdf5-dev is for reading and writing data in open data format HDF5. All the other packages are necessary for devtools (compilers)\n\n\n5. Install the free version of RStudio Desktop here:\nGo to https://posit.co/download/rstudio-desktop/ and download one with keywords “Ubuntu xxx/Debian xxx” (depending on your system version), move the downloaded file to your desktop, rename it “rstudio.deb”.\nOpen terminal, type the following command in your terminal\ncd ~/Desktop\nsudo dpkg -i ./rstudio.deb \nand RStudio should be in your application list. If not, look at your sidebar in Ubuntu, click search your computer and enter “RStudio”.\n\n\n\nFor minor updates, start RStudio, “Help”/“Check for Updates”; start R, “R”/“Check For R Updates”).\nIf you have a RAVE version older than October 2022, you must first enter the following command into the R console (if you are not sure, it is OK to run it just in case).\nlib_path &lt;- Sys.getenv(\"RAVE_LIB_PATH\", unset = Sys.getenv(\"R_LIBS_USER\", unset = .libPaths()[[1]]))\ninstall.packages('ravemanager', repos = 'https://rave-ieeg.r-universe.dev', lib = lib_path)\nRegardless of your current RAVE version, enter the following command into the R console:\nravemanager::version_info()\nThis prints out current RAVE package versions. If all the core packages are up-to-date, you will see the message “Everything is up to date”, otherwise please follow the following steps. Quit all instance of R and RStudio before proceeding, or RAVE will not be able to update. Restart R and enter the following command into the R console :\nlib_path &lt;- Sys.getenv(\"RAVE_LIB_PATH\", unset = Sys.getenv(\"R_LIBS_USER\", unset = .libPaths()[[1]]))\nloadNamespace(\"ravemanager\", lib.loc = lib_path)\nravemanager::update_rave()\nPress “enter” if you are asked “yes/no/cancel”.\nAfter this command completes, quit and restart RStudio. Then restart the updated RAVE:\nrave::start_rave2()\nNotes: Be sure to quit ALL other running R and RStudio instances before running “ravemanager::update_rave()”, otherwise packages will be locked and upgrade will fail. For other problems, the fallback is to completely reinstall RAVE.\n\n\n\nReuseCC BY 4.0"
  },
  {
    "objectID": "blogs.html",
    "href": "blogs.html",
    "title": "\nDocumentations\n\n\nShowcases\n\n\nExamples\n",
    "section": "",
    "text": "Basic Signal Filters\n\n\n\n\n\n\nSignal Processing\n\n\nInteractive Module\n\n\n\nHigh-level functions to design and apply filters in RAVE \n\n\n\n\n\nSep 18, 2024\n\n\nZhengjia Wang\n\n\n\n\n\n\n\n\n\n\n\n\nCustomize 3D Viewer Color Palette\n\n\n\n\n\n\n3D Viewer\n\n\nInteractive Module\n\n\n\nCreate basic 3D viewer and render with colors \n\n\n\n\n\nSep 16, 2024\n\n\nZhengjia Wang\n\n\n\n\n\n\n\n\n\n\n\n\nMake a group brain\n\n\n\n\n\n\n3D Viewer\n\n\n\nCreate a group-level 3D viewer \n\n\n\n\n\nSep 16, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nUpdating and Upgrading Guide\n\n\n\n\n\n\nInstallation\n\n\n\nUpdate RAVE today! \n\n\n\n\n\nSep 15, 2024\n\n\nZhengjia Wang, John Magnotti, Xiang Zhang, Michael Beauchamp\n\n\n\n\n\n\n\n\n\n\n\n\nInstallation Guide\n\n\n\n\n\n\nInstallation\n\n\n\nTry RAVE today! \n\n\n\n\n\nSep 14, 2024\n\n\nZhengjia Wang, John Magnotti, Xiang Zhang, Michael Beauchamp\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/from_wiki/installation.html",
    "href": "posts/from_wiki/installation.html",
    "title": "Installation Guide",
    "section": "",
    "text": "Please please please, read and install the prerequisites.\n❗The most common installation problem is that the prerequisites are not installed.❗\n❗❗❗If your installation fails, there’s a 99.9% chance that the prerequisites are missing.❗❗❗\n\nFirst, choose your operating system below to start:\n\n\n\n\nMacOS requires users to have administrator (admin) privileges to install applications. At several points during the installation, MacOS will ask for your account password to verify installation. Installation will fail if your MacOS account doesn’t have admin privileges.\n\nHow to check if I have an admin account?\n\nOpen Terminal (in the /Applications/Utilities folder). Copy the command line shown below into the terminal window.\n sudo ls\nYou will be prompted for a password. This is the password of the MacOS account you are logged in as. If you have an admin account, MacOS will show the files in the current directory. If not, you will receive an error message. Alternately, click anywhere on the desktop to activate the MacOS menu bar, click on the Apple icon at the top left of the menu bar, then “System Preferences” or “System Settings”, then “Users & Groups”. Find your current account and verify that it has admin privileges.\n\nWhat if I don’t have an admin account?\n\nYou will need to create a new account with admin privileges or change the privileges of your current account, see https://support.apple.com/guide/mac-help/change-users-groups-settings-mtusr001/mac . If your computer is administered by others, ask them to create an admin account for you.\n\n\n\nClick here to install the latest version of the R language for Mac. Find the latest package (.pkg) file, click to download, then open and install. There are different versions of R for older Macs with Intel CPUs and newer Macs with Apple CPUs (M1/M2). Choose the correct version, either “Intel 64-bit” or “Apple silicon ARM64”.\nTo verify R installation: R will be installed in the /Applications folder. Open this folder and double-click on the R icon to start R. After starting R, we recommend that you right-click on the R icon in the Dock and select “Options”/“Keep in Dock” to make it easier to launch with a single click. We also recommend starting R, opening the “Preferences”/“Startup” tab, and change “Save workspace on exit from”R” to “No”. Uncheck the box “Read history file on startup”. To check the current version of “R”, start R and enter the following into the console:\nR.version\nThis will produce a number of lines of output, beginning with something like\n platform       x86_64-apple-darwin17.0     \n arch           x86_64\n\n\n\nInstallation requires the latest version of the homebrew package manager. Open Terminal (in the /Applications/Utilities folder). Copy the command line shown below into the terminal window.\n/usr/bin/env bash\nCopy the line below into the terminal window.\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\nThis step will take several minutes to complete. Wait until the installation is finished and the command prompt reappears before moving to the next step.\nAdd brew to your path or the next installation steps will fail. The installer provides the necessary command lines in the Terminal window at the conclusion of the previous step. Execute them in the same terminal window by copying and pasting. They will look something like\necho 'eval \"$(/opt/homebrew/bin/brew shellenv)\"' &gt;&gt; ~/.zprofile\neval \"$(/opt/homebrew/bin/brew shellenv)\"\nThese commands will not produce any output.\nTo verify brew installation: Copy the command line shown below into the terminal window.\nbrew --version\nShould produce a result like\n Homebrew 3.4.1\n Homebrew/homebrew-core (git revision f03c984ad7; last commit 2022-03-08)\n\n\n\nEnter this command into the terminal window:\nbrew install hdf5 fftw pkg-config cmake libpng\nThis step will install the hdf5 (high-performance file system), fftw (fast-fourier transform library), pkg-config (package configuration toolbox), cmake (cross-platform make for compiling optional packages such as ant), libpng (library for manipulating png images) and takes several minutes to complete. Wait until the installation is finished and the command prompt reappears before moving to the next step.\n\n\n\nScroll to the top of the page and click on the “Install” tab to return to the full installation guide.\n\n\n\nYou may receive this message\n Warning: macOS is reporting that you have not yet agreed to the Xcode license. This can occur if Xcode has been updated or reinstalled (e.g. as part of a macOS update). Some features (e.g. Git / SVN) may be disabled.\nTo make this error go away, open the Terminal app in the Applications folder, enter\nsudo xcodebuild -license accept\nThen restart RStudio. A helpful article in case of XCode installation errors.\nIf the XCode download from the RStudio install in step 2 fails, install the command line tools manually. First, download XCode. Click “GET” (if instead you see “OPEN”, then Xcode is already installed.) Open the Terminal app in the Applications folder, enter\nxcode-select --install\nClick “yes” to proceed with installing the command-line tools. The message “xcode-select: error: command line tools are already installed” means that you can proceed.\n\n\n\nThese instructions are for Windows 10 with “bash” enabled. You will be asked many questions by the installers; the default response is fine for all of them.\n\n\nGo to https://cran.r-project.org/bin/windows/base/ and download the latest R.\nOpen the installer and click through to install\n\n\n\nGo to https://cran.r-project.org/bin/windows/Rtools/ and download a proper version of RTools. The version must match your version of R. RTools contains compilers used to compile packages\n\n\n\n\nIf you encounter difficulties, email help@rave.wiki.\n\nTo install R, please go to https://cran.r-project.org/ and read installation guide for Linux system. The following guide is for Ubuntu 20.x (x86_64) system. Please do ALWAYS read R’s official installation guide.\n\n\nOpen terminal (if you don’t know how, look at your sidebar in Ubuntu, search your computer enter terminal, and open it), type the following code:\n# update indices\nsudo apt update -qq\n# install two helper packages we need\nsudo apt install --no-install-recommends software-properties-common dirmngr\n# add the signing key (by Michael Rutter) for these repos\n# To verify key, run gpg --show-keys /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc \n# Fingerprint: E298A3A825C0D65DFD57CBB651716619E084DAB9\nwget -qO- https://cloud.r-project.org/bin/linux/ubuntu/marutter_pubkey.asc | sudo tee -a /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc\n# add the R 4.0 repo from CRAN -- adjust 'focal' to 'groovy' or 'bionic' as needed\nsudo add-apt-repository \"deb https://cloud.r-project.org/bin/linux/ubuntu $(lsb_release -cs)-cran40/\"\n\n\n\nCopy the following command line by line into your terminal and run\nsudo apt-get install r-base r-base-dev\n\n\n\nCopy the following command line by line into your terminal and run\ninstall.packages('ravemanager', repos = 'https://rave-ieeg.r-universe.dev')\nravemanager::system_requirements(sudo = TRUE)\nIf your operating system is supported, it will print out all the system libraries needed.\n\n\n\nOpen a new terminal window, copy the installation script generated from the last step into this new window. For example, on Ubuntu 20.x,\nsudo apt-get install -y build-essential file git psmisc procps sudo wget make cmake \\\n libsodium-dev libffi-dev libbz2-dev libpcre2-dev libcairo2-dev libssh2-1-dev libtiff5-dev libv8-dev \\\n libicu-dev zlib1g-dev libcurl4-openssl-dev libssl-dev libfontconfig1-dev libfreetype6-dev \\\n libfribidi-dev libharfbuzz-dev libjpeg-dev libpng-dev libtiff-dev pandoc libxml2-dev git libgit2-dev \\\n libfftw3-dev libhdf5-dev libglpk-dev libgmp3-dev libzmq3-dev python3\nThe packages libv8-dev is for V8 package to enable JavaScript. libxml2-dev is for xml2. libfftw3-dev libtiff5-dev are necessary for fast-fourier transformations and libhdf5-dev is for reading and writing data in open data format HDF5. All the other packages are necessary for devtools (compilers)\n\n\n\nGo to https://posit.co/download/rstudio-desktop/ and download one with keywords “Ubuntu xxx/Debian xxx” (depending on your system version), move the downloaded file to your desktop, rename it “rstudio.deb”.\nOpen terminal, type the following command in your terminal\ncd ~/Desktop\nsudo dpkg -i ./rstudio.deb \nand RStudio should be in your application list. If not, look at your sidebar in Ubuntu, click search your computer and enter “RStudio”."
  },
  {
    "objectID": "posts/from_wiki/installation.html#step-1-install-prerequisites",
    "href": "posts/from_wiki/installation.html#step-1-install-prerequisites",
    "title": "Installation Guide",
    "section": "",
    "text": "Please please please, read and install the prerequisites.\n❗The most common installation problem is that the prerequisites are not installed.❗\n❗❗❗If your installation fails, there’s a 99.9% chance that the prerequisites are missing.❗❗❗\n\nFirst, choose your operating system below to start:\n\n\n\n\nMacOS requires users to have administrator (admin) privileges to install applications. At several points during the installation, MacOS will ask for your account password to verify installation. Installation will fail if your MacOS account doesn’t have admin privileges.\n\nHow to check if I have an admin account?\n\nOpen Terminal (in the /Applications/Utilities folder). Copy the command line shown below into the terminal window.\n sudo ls\nYou will be prompted for a password. This is the password of the MacOS account you are logged in as. If you have an admin account, MacOS will show the files in the current directory. If not, you will receive an error message. Alternately, click anywhere on the desktop to activate the MacOS menu bar, click on the Apple icon at the top left of the menu bar, then “System Preferences” or “System Settings”, then “Users & Groups”. Find your current account and verify that it has admin privileges.\n\nWhat if I don’t have an admin account?\n\nYou will need to create a new account with admin privileges or change the privileges of your current account, see https://support.apple.com/guide/mac-help/change-users-groups-settings-mtusr001/mac . If your computer is administered by others, ask them to create an admin account for you.\n\n\n\nClick here to install the latest version of the R language for Mac. Find the latest package (.pkg) file, click to download, then open and install. There are different versions of R for older Macs with Intel CPUs and newer Macs with Apple CPUs (M1/M2). Choose the correct version, either “Intel 64-bit” or “Apple silicon ARM64”.\nTo verify R installation: R will be installed in the /Applications folder. Open this folder and double-click on the R icon to start R. After starting R, we recommend that you right-click on the R icon in the Dock and select “Options”/“Keep in Dock” to make it easier to launch with a single click. We also recommend starting R, opening the “Preferences”/“Startup” tab, and change “Save workspace on exit from”R” to “No”. Uncheck the box “Read history file on startup”. To check the current version of “R”, start R and enter the following into the console:\nR.version\nThis will produce a number of lines of output, beginning with something like\n platform       x86_64-apple-darwin17.0     \n arch           x86_64\n\n\n\nInstallation requires the latest version of the homebrew package manager. Open Terminal (in the /Applications/Utilities folder). Copy the command line shown below into the terminal window.\n/usr/bin/env bash\nCopy the line below into the terminal window.\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\nThis step will take several minutes to complete. Wait until the installation is finished and the command prompt reappears before moving to the next step.\nAdd brew to your path or the next installation steps will fail. The installer provides the necessary command lines in the Terminal window at the conclusion of the previous step. Execute them in the same terminal window by copying and pasting. They will look something like\necho 'eval \"$(/opt/homebrew/bin/brew shellenv)\"' &gt;&gt; ~/.zprofile\neval \"$(/opt/homebrew/bin/brew shellenv)\"\nThese commands will not produce any output.\nTo verify brew installation: Copy the command line shown below into the terminal window.\nbrew --version\nShould produce a result like\n Homebrew 3.4.1\n Homebrew/homebrew-core (git revision f03c984ad7; last commit 2022-03-08)\n\n\n\nEnter this command into the terminal window:\nbrew install hdf5 fftw pkg-config cmake libpng\nThis step will install the hdf5 (high-performance file system), fftw (fast-fourier transform library), pkg-config (package configuration toolbox), cmake (cross-platform make for compiling optional packages such as ant), libpng (library for manipulating png images) and takes several minutes to complete. Wait until the installation is finished and the command prompt reappears before moving to the next step.\n\n\n\nScroll to the top of the page and click on the “Install” tab to return to the full installation guide.\n\n\n\nYou may receive this message\n Warning: macOS is reporting that you have not yet agreed to the Xcode license. This can occur if Xcode has been updated or reinstalled (e.g. as part of a macOS update). Some features (e.g. Git / SVN) may be disabled.\nTo make this error go away, open the Terminal app in the Applications folder, enter\nsudo xcodebuild -license accept\nThen restart RStudio. A helpful article in case of XCode installation errors.\nIf the XCode download from the RStudio install in step 2 fails, install the command line tools manually. First, download XCode. Click “GET” (if instead you see “OPEN”, then Xcode is already installed.) Open the Terminal app in the Applications folder, enter\nxcode-select --install\nClick “yes” to proceed with installing the command-line tools. The message “xcode-select: error: command line tools are already installed” means that you can proceed.\n\n\n\nThese instructions are for Windows 10 with “bash” enabled. You will be asked many questions by the installers; the default response is fine for all of them.\n\n\nGo to https://cran.r-project.org/bin/windows/base/ and download the latest R.\nOpen the installer and click through to install\n\n\n\nGo to https://cran.r-project.org/bin/windows/Rtools/ and download a proper version of RTools. The version must match your version of R. RTools contains compilers used to compile packages\n\n\n\n\nIf you encounter difficulties, email help@rave.wiki.\n\nTo install R, please go to https://cran.r-project.org/ and read installation guide for Linux system. The following guide is for Ubuntu 20.x (x86_64) system. Please do ALWAYS read R’s official installation guide.\n\n\nOpen terminal (if you don’t know how, look at your sidebar in Ubuntu, search your computer enter terminal, and open it), type the following code:\n# update indices\nsudo apt update -qq\n# install two helper packages we need\nsudo apt install --no-install-recommends software-properties-common dirmngr\n# add the signing key (by Michael Rutter) for these repos\n# To verify key, run gpg --show-keys /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc \n# Fingerprint: E298A3A825C0D65DFD57CBB651716619E084DAB9\nwget -qO- https://cloud.r-project.org/bin/linux/ubuntu/marutter_pubkey.asc | sudo tee -a /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc\n# add the R 4.0 repo from CRAN -- adjust 'focal' to 'groovy' or 'bionic' as needed\nsudo add-apt-repository \"deb https://cloud.r-project.org/bin/linux/ubuntu $(lsb_release -cs)-cran40/\"\n\n\n\nCopy the following command line by line into your terminal and run\nsudo apt-get install r-base r-base-dev\n\n\n\nCopy the following command line by line into your terminal and run\ninstall.packages('ravemanager', repos = 'https://rave-ieeg.r-universe.dev')\nravemanager::system_requirements(sudo = TRUE)\nIf your operating system is supported, it will print out all the system libraries needed.\n\n\n\nOpen a new terminal window, copy the installation script generated from the last step into this new window. For example, on Ubuntu 20.x,\nsudo apt-get install -y build-essential file git psmisc procps sudo wget make cmake \\\n libsodium-dev libffi-dev libbz2-dev libpcre2-dev libcairo2-dev libssh2-1-dev libtiff5-dev libv8-dev \\\n libicu-dev zlib1g-dev libcurl4-openssl-dev libssl-dev libfontconfig1-dev libfreetype6-dev \\\n libfribidi-dev libharfbuzz-dev libjpeg-dev libpng-dev libtiff-dev pandoc libxml2-dev git libgit2-dev \\\n libfftw3-dev libhdf5-dev libglpk-dev libgmp3-dev libzmq3-dev python3\nThe packages libv8-dev is for V8 package to enable JavaScript. libxml2-dev is for xml2. libfftw3-dev libtiff5-dev are necessary for fast-fourier transformations and libhdf5-dev is for reading and writing data in open data format HDF5. All the other packages are necessary for devtools (compilers)\n\n\n\nGo to https://posit.co/download/rstudio-desktop/ and download one with keywords “Ubuntu xxx/Debian xxx” (depending on your system version), move the downloaded file to your desktop, rename it “rstudio.deb”.\nOpen terminal, type the following command in your terminal\ncd ~/Desktop\nsudo dpkg -i ./rstudio.deb \nand RStudio should be in your application list. If not, look at your sidebar in Ubuntu, click search your computer and enter “RStudio”."
  },
  {
    "objectID": "posts/from_wiki/installation.html#step-2-install-rave-for-the-first-time",
    "href": "posts/from_wiki/installation.html#step-2-install-rave-for-the-first-time",
    "title": "Installation Guide",
    "section": "Step 2: Install RAVE for the First Time",
    "text": "Step 2: Install RAVE for the First Time\nIf you have installed RAVE before, please check How to update RAVE.\n\nOpen the R application if it is not already open (RStudio may also be used). Copy and paste the following command into the R (or RStudio) console:\n\ninstall.packages('ravemanager', repos = 'https://rave-ieeg.r-universe.dev')\n\nCopy and paste the following command into the R console:\n\nravemanager::install()\nWait until you see the “Done finalizing installations!” message and the R Console command prompt reappears. This may take a few minutes depending on the speed of your internet connection. After installation, it is recommended to close all instances of R and restart R.\n\nHere is a list of common problems you might encounter during the installlation.\n\nThe following packages are found that cannot be unloaded…\n\nSome processes are still using RAVE scripts. Please make sure all R and RStudio windows are closed. Close them, re-open, and retry the installation.\n\n[ravemanager] The installer’s major version has been updated (from xxx -&gt; xxx)…\n\nPlease make sure all R and RStudio windows are closed. Close them, re-open, and retry the installation.\n\nYour R version (xxx) is too low….\n\nR major version is too low, return to install the prerequisites (see Step 1)."
  },
  {
    "objectID": "posts/from_wiki/installation.html#step-3-launch-rave",
    "href": "posts/from_wiki/installation.html#step-3-launch-rave",
    "title": "Installation Guide",
    "section": "Step 3: Launch RAVE",
    "text": "Step 3: Launch RAVE\nCopy and paste the following command into the R console:\nrave::start_rave2()\nIn a few seconds a web browser window showing RAVE should appear. Success! Explore RAVE by clicking on one of the module names on the left-hand side such as “Subject 3D Viewer” to view a brain or “Power Explorer” to view sample iEEG data."
  },
  {
    "objectID": "posts/from_wiki/installation.html#step-4-optional-but-recommended-install-isolated-python-environment",
    "href": "posts/from_wiki/installation.html#step-4-optional-but-recommended-install-isolated-python-environment",
    "title": "Installation Guide",
    "section": "Step 4 (optional but recommended): Install Isolated Python Environment",
    "text": "Step 4 (optional but recommended): Install Isolated Python Environment\nCopy and paste the following command into the “R” console:\nravemanager::configure_python()\nSome advanced RAVE features (such as CT to MRI alignment via ANTs) call Python libraries. To prevent conflicts with existing Python installations and ensure stability and reliability, this step uses Miniconda to install an isolated Python environment and useful Python packages (numpy, scipy, jupyterlab, mne, pynwb, antspyx)."
  },
  {
    "objectID": "posts/signal_processing/signal-filter.html",
    "href": "posts/signal_processing/signal-filter.html",
    "title": "Basic Signal Filters",
    "section": "",
    "text": "This post contains interactive components (experimental) that allows you to execute RAVE code from the web browsers. If you would like to try this feature and customize/play with the code, please be patient. It might take a while for the browser to finish setting up (depending on your network speed). Once the script is ready, you will see “WEBR STATUS: 🟢 Ready!” in the above banner."
  },
  {
    "objectID": "posts/signal_processing/signal-filter.html#preparation",
    "href": "posts/signal_processing/signal-filter.html#preparation",
    "title": "Basic Signal Filters",
    "section": "1. Preparation",
    "text": "1. Preparation\nLet’s load the package and generate a sample signal. The signal is a mixture of 2Hz, 10Hz, 60Hz, and noise\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "posts/signal_processing/signal-filter.html#fir-filter",
    "href": "posts/signal_processing/signal-filter.html#fir-filter",
    "title": "Basic Signal Filters",
    "section": "2. FIR Filter",
    "text": "2. FIR Filter\nConstruct a FIR filter with low pass at 3Hz and (around) 0.5Hz transition bandwidth:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nApply the filter to the signal x using filtfilt method:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "posts/3dviewer/viewer201.html",
    "href": "posts/3dviewer/viewer201.html",
    "title": "Customize 3D Viewer Color Palette",
    "section": "",
    "text": "This post contains interactive components (experimental) that allows you to execute RAVE code from the web browsers. If you would like to try this feature and customize/play with the code, please be patient. It might take a while for the browser to finish setting up (depending on your network speed). Once the script is ready, you will see “WEBR STATUS: 🟢 Ready!” in the above banner.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "posts/3dviewer/viewer201.html#prerequisites",
    "href": "posts/3dviewer/viewer201.html#prerequisites",
    "title": "Customize 3D Viewer Color Palette",
    "section": "Prerequisites",
    "text": "Prerequisites\nThis post assumes that you have already imported subject’s imaging data to RAVE and finished the electrode localization. If you haven’t done so, please check (TODO) for instructions."
  },
  {
    "objectID": "posts/3dviewer/viewer201.html#simple-3d-viewer",
    "href": "posts/3dviewer/viewer201.html#simple-3d-viewer",
    "title": "Customize 3D Viewer Color Palette",
    "section": "1. Simple 3D viewer",
    "text": "1. Simple 3D viewer\nLibrary raveio provides simple high-level function rave_brain to load 3D brain object.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nUse brain$plot(&lt;your arguments...&gt;) to show the viewer:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPreview of the result. See below if you want to play with the 3D viewer interactively"
  },
  {
    "objectID": "posts/3dviewer/viewer201.html#render-electrodes-with-values",
    "href": "posts/3dviewer/viewer201.html#render-electrodes-with-values",
    "title": "Customize 3D Viewer Color Palette",
    "section": "2. Render electrodes with values",
    "text": "2. Render electrodes with values\nbrain$set_electrode_values(table_or_path) allows users to load a data table and render electrodes with colors. Users can create a csv table using Excel or their favorite programming languages, as long as the table follows the following format:\n\n\n\nSubject\nElectrode\nvarname*\n\n\n\n\nDemoSubject\n1\n0.25\n\n\nDemoSubject\n14\n-0.4\n\n\n…\n…\n…\n\n\n\nHere is the explanation of the columns (case-sensitive):\n\nSubject is the subject code\nElectrode is the electrode channel number (integer)\nvarname* can be almost anything (give it a meaningful name, for e.g., Power, Cluster, …) that you would like to show, and the values can be either numeric or categorical\n\nThe variable name is recommended to only contain letters and digits. For example, BetaBandPower seems to be a good idea, while names like 75-150 Hz should be avoided\nThe variable values must not be numerical if the intent is categorical. For example cluster values such as 1, 2, 3, … should be avoided and users should use Cluster 1, Cluster 2, Cluster 3, …, or A, B, C, … instead\n\n\nHere’s an example data table\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nLeft: continuous values with symmetric value range. The color palette transition from blue to white to red (default); Right: Categorical data with default color palette"
  },
  {
    "objectID": "posts/3dviewer/viewer201.html#render-options",
    "href": "posts/3dviewer/viewer201.html#render-options",
    "title": "Customize 3D Viewer Color Palette",
    "section": "3. Render options",
    "text": "3. Render options\nbrain$plot allows users to provide render options to change the following components:\n\nColor palette\nDefault value ranges (for continuous data)\nControl panels\n\nHere’s a full example:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "posts/3dviewer/viewer201.html#key-documentations",
    "href": "posts/3dviewer/viewer201.html#key-documentations",
    "title": "Customize 3D Viewer Color Palette",
    "section": "Key Documentations",
    "text": "Key Documentations\n\nFunction raveio::rave_brain\n\nLoad ‘FreeSurfer’ or ‘AFNI/SUMA’ brain from ‘RAVE’\n\nrave_brain\n\nDescription\n\n\nCreate 3D visualization of the brain and visualize with modern web browsers\n\n\nUsage\n\nrave_brain(\n  subject,\n  surfaces = \"pial\",\n  use_141 = TRUE,\n  recache = FALSE,\n  clean_before_cache = FALSE,\n  compute_template = FALSE,\n  usetemplateifmissing = FALSE,\n  include_electrodes = TRUE\n)\n\n\nArguments\n\n\n\n\nsubject\n\n\n\ncharacter, list, or RAVESubject instance; for list or other objects, make sure subject$subject_id is a valid ‘RAVE’ subject ‘ID’\n\n\n\n\n\nsurfaces\n\n\n\none or more brain surface types from “pial”, “white”, “smoothwm”, “pial-outer-smoothed”, etc.; check freesurfer_brain2\n\n\n\n\n\nuse_141\n\n\n\nwhether to use ‘AFNI/SUMA’ standard 141 brain\n\n\n\n\n\nrecache\n\n\n\nwhether to re-calculate cache; only should be used when the original ‘FreeSurfer’ or ‘AFNI/SUMA’ files are changed; such as new files are added\n\n\n\n\n\nclean_before_cache\n\n\n\nwhether to clean the original cache before recache; only set it to be true if original cached files are corrupted\n\n\n\n\n\ncompute_template\n\n\n\nwhether to compute template mappings; useful when template mapping with multiple subjects are needed\n\n\n\n\n\nusetemplateifmissing\n\n\n\nwhether to use template brain when the subject brain files are missing. If set to true, then a template (usually ‘N27’) brain will be displayed as an alternative solution, and electrodes will be rendered according to their ‘MNI305’ coordinates, or ‘VertexNumber’ if given.\n\n\n\n\n\ninclude_electrodes\n\n\n\nwhether to include electrode in the model; default is true\n\n\n\n\n\nValue\n\n\nA ‘threeBrain’ instance if brain is found or usetemplateifmissing is set to true; otherwise returns NULL\n\n\nExamples\n\n\n\n# Please make sure DemoSubject is correctly installed\n# The subject is ~1GB from Github\n\nif(interactive()){\n  brain &lt;- rave_brain(\"demo/DemoSubject\")\n\n  if( !is.null(brain) ) { brain$plot() }\n\n}"
  }
]